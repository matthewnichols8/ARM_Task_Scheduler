
My_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001158  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080012e0  080012e0  000022e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800131c  0800131c  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800131c  0800131c  00003060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800131c  0800131c  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800131c  0800131c  0000231c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001320  08001320  00002320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001324  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e0d  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a3  00000000  00000000  00003e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00004440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000169  00000000  00000000  00004640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e66  00000000  00000000  000047a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c5e  00000000  00000000  0000760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009f7b  00000000  00000000  0000926d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000131e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d28  00000000  00000000  0001322c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00013f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012c8 	.word	0x080012c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080012c8 	.word	0x080012c8

080001c8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ce:	4b19      	ldr	r3, [pc, #100]	@ (8000234 <led_init_all+0x6c>)
 80001d0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001d2:	4b19      	ldr	r3, [pc, #100]	@ (8000238 <led_init_all+0x70>)
 80001d4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f043 0208 	orr.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000212:	200c      	movs	r0, #12
 8000214:	f000 f82a 	bl	800026c <led_off>
    led_off(LED_ORANGE);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 f827 	bl	800026c <led_off>
    led_off(LED_RED);
 800021e:	200e      	movs	r0, #14
 8000220:	f000 f824 	bl	800026c <led_off>
    led_off(LED_BLUE);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f821 	bl	800026c <led_off>



}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00

0800023c <led_on>:

void led_on(uint8_t led_no)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <led_on+0x2c>)
 8000248:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	2101      	movs	r1, #1
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	431a      	orrs	r2, r3
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

}
 800025c:	bf00      	nop
 800025e:	3714      	adds	r7, #20
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40020c14 	.word	0x40020c14

0800026c <led_off>:

void led_off(uint8_t led_no)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <led_off+0x2c>)
 8000278:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2101      	movs	r1, #1
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	43d2      	mvns	r2, r2
 8000288:	401a      	ands	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	601a      	str	r2, [r3, #0]

}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40020c14 	.word	0x40020c14

0800029c <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	enable_processor_faults(); //Enables Mem Manage, Bus, and Usage Faults
 80002a0:	f000 f91e 	bl	80004e0 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <main+0x2c>)
 80002a6:	f000 f889 	bl	80003bc <init_scheduler_stack>

	init_tasks_stack();
 80002aa:	f000 f88d 	bl	80003c8 <init_tasks_stack>

	led_init_all(); //Intitalizes all LEDS
 80002ae:	f7ff ff8b 	bl	80001c8 <led_init_all>

	init_systick_timer(TICK_HZ); //Generates SysTick Timer Exception
 80002b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b6:	f000 f84d 	bl	8000354 <init_systick_timer>

	switch_sp_to_psp(); //Switches from MSP to PSP
 80002ba:	f000 f997 	bl	80005ec <switch_sp_to_psp>

	task1_handler();
 80002be:	f000 f805 	bl	80002cc <task1_handler>

    /* Loop forever */
	for(;;);
 80002c2:	bf00      	nop
 80002c4:	e7fd      	b.n	80002c2 <main+0x26>
 80002c6:	bf00      	nop
 80002c8:	2001ec00 	.word	0x2001ec00

080002cc <task1_handler>:

void idle_task() {
	while(1);
}

void task1_handler() {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_GREEN); //Green LED
 80002d0:	200c      	movs	r0, #12
 80002d2:	f7ff ffb3 	bl	800023c <led_on>
		task_delay(1000);
 80002d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002da:	f000 f9a7 	bl	800062c <task_delay>
		led_off(LED_GREEN);
 80002de:	200c      	movs	r0, #12
 80002e0:	f7ff ffc4 	bl	800026c <led_off>
		task_delay(1000);
 80002e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e8:	f000 f9a0 	bl	800062c <task_delay>
		led_on(LED_GREEN); //Green LED
 80002ec:	bf00      	nop
 80002ee:	e7ef      	b.n	80002d0 <task1_handler+0x4>

080002f0 <task2_handler>:
	}
}

void task2_handler() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_ORANGE); //Orange LED
 80002f4:	200d      	movs	r0, #13
 80002f6:	f7ff ffa1 	bl	800023c <led_on>
		task_delay(500);
 80002fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002fe:	f000 f995 	bl	800062c <task_delay>
		led_off(LED_ORANGE);
 8000302:	200d      	movs	r0, #13
 8000304:	f7ff ffb2 	bl	800026c <led_off>
		task_delay(500);
 8000308:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800030c:	f000 f98e 	bl	800062c <task_delay>
		led_on(LED_ORANGE); //Orange LED
 8000310:	bf00      	nop
 8000312:	e7ef      	b.n	80002f4 <task2_handler+0x4>

08000314 <task3_handler>:
	}
}

void task3_handler() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_BLUE); //Blue LED
 8000318:	200f      	movs	r0, #15
 800031a:	f7ff ff8f 	bl	800023c <led_on>
		task_delay(250);
 800031e:	20fa      	movs	r0, #250	@ 0xfa
 8000320:	f000 f984 	bl	800062c <task_delay>
		led_off(LED_BLUE);
 8000324:	200f      	movs	r0, #15
 8000326:	f7ff ffa1 	bl	800026c <led_off>
		task_delay(250);
 800032a:	20fa      	movs	r0, #250	@ 0xfa
 800032c:	f000 f97e 	bl	800062c <task_delay>
		led_on(LED_BLUE); //Blue LED
 8000330:	bf00      	nop
 8000332:	e7f1      	b.n	8000318 <task3_handler+0x4>

08000334 <task4_handler>:
	}
}

void task4_handler() {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	while(1) {
		led_on(LED_RED); //Red LED
 8000338:	200e      	movs	r0, #14
 800033a:	f7ff ff7f 	bl	800023c <led_on>
		task_delay(125);
 800033e:	207d      	movs	r0, #125	@ 0x7d
 8000340:	f000 f974 	bl	800062c <task_delay>
		led_off(LED_RED);
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff91 	bl	800026c <led_off>
		task_delay(125);
 800034a:	207d      	movs	r0, #125	@ 0x7d
 800034c:	f000 f96e 	bl	800062c <task_delay>
		led_on(LED_RED); //Red LED
 8000350:	bf00      	nop
 8000352:	e7f1      	b.n	8000338 <task4_handler+0x4>

08000354 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz) {
 8000354:	b480      	push	{r7}
 8000356:	b087      	sub	sp, #28
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint32_t* pSRVR = (uint32_t*)  0xE000E014; //SysTick Reload Value Register
 800035c:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <init_systick_timer+0x5c>)
 800035e:	617b      	str	r3, [r7, #20]
	uint32_t* pSCSR = (uint32_t*)  0xE000E010; //SysTick Control and Status Register
 8000360:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <init_systick_timer+0x60>)
 8000362:	613b      	str	r3, [r7, #16]
	uint32_t countVal = (SYSTICK_TIM_CLK / tick_hz) - 1; //Reload Value should be N-1 (Number of clock cycles - 1).
 8000364:	4a14      	ldr	r2, [pc, #80]	@ (80003b8 <init_systick_timer+0x64>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	fbb2 f3f3 	udiv	r3, r2, r3
 800036c:	3b01      	subs	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]

	//Clear value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]

	//load value into SVR
	*pSRVR |= countVal;
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	431a      	orrs	r2, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	601a      	str	r2, [r3, #0]

	//Edit Settings
	*pSCSR |= (1 << 1); //Enables SysTick Exception Request
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f043 0202 	orr.w	r2, r3, #2
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Indicates that the clock source is the processor internal clock
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f043 0204 	orr.w	r2, r3, #4
 8000396:	693b      	ldr	r3, [r7, #16]
 8000398:	601a      	str	r2, [r3, #0]

	//Enable systick
	*pSCSR |= (1 << 0); //Enables the SysTick counter
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0201 	orr.w	r2, r3, #1
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	601a      	str	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	371c      	adds	r7, #28
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	e000e014 	.word	0xe000e014
 80003b4:	e000e010 	.word	0xe000e010
 80003b8:	00f42400 	.word	0x00f42400

080003bc <init_scheduler_stack>:

/*
 * Must be a naked function to access MSP which is a special register
 */
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack) {
 80003bc:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : ); //Puts value of the top of the stack into MSP
 80003be:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); //Return from function call
 80003c2:	4770      	bx	lr
}
 80003c4:	bf00      	nop
	...

080003c8 <init_tasks_stack>:



void init_tasks_stack() {
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0

	user_tasks[0].currentState = TASK_READY_STATE;
 80003ce:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	721a      	strb	r2, [r3, #8]
	user_tasks[1].currentState = TASK_READY_STATE;
 80003d4:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	761a      	strb	r2, [r3, #24]
	user_tasks[2].currentState = TASK_READY_STATE;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	user_tasks[3].currentState = TASK_READY_STATE;
 80003e2:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	user_tasks[4].currentState = TASK_READY_STATE;
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	user_tasks[0].pspVal = IDLE_STACK_START;
 80003f2:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003f4:	4a31      	ldr	r2, [pc, #196]	@ (80004bc <init_tasks_stack+0xf4>)
 80003f6:	601a      	str	r2, [r3, #0]
	user_tasks[1].pspVal = T1_STACK_START;
 80003f8:	4b2f      	ldr	r3, [pc, #188]	@ (80004b8 <init_tasks_stack+0xf0>)
 80003fa:	4a31      	ldr	r2, [pc, #196]	@ (80004c0 <init_tasks_stack+0xf8>)
 80003fc:	611a      	str	r2, [r3, #16]
	user_tasks[2].pspVal = T2_STACK_START;
 80003fe:	4b2e      	ldr	r3, [pc, #184]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000400:	4a30      	ldr	r2, [pc, #192]	@ (80004c4 <init_tasks_stack+0xfc>)
 8000402:	621a      	str	r2, [r3, #32]
	user_tasks[3].pspVal = T3_STACK_START;
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000406:	4a30      	ldr	r2, [pc, #192]	@ (80004c8 <init_tasks_stack+0x100>)
 8000408:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[4].pspVal = T4_STACK_START;
 800040a:	4b2b      	ldr	r3, [pc, #172]	@ (80004b8 <init_tasks_stack+0xf0>)
 800040c:	4a2f      	ldr	r2, [pc, #188]	@ (80004cc <init_tasks_stack+0x104>)
 800040e:	641a      	str	r2, [r3, #64]	@ 0x40

	user_tasks[0].task_handler = task4_handler;
 8000410:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000412:	4a2f      	ldr	r2, [pc, #188]	@ (80004d0 <init_tasks_stack+0x108>)
 8000414:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000416:	4b28      	ldr	r3, [pc, #160]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000418:	4a2e      	ldr	r2, [pc, #184]	@ (80004d4 <init_tasks_stack+0x10c>)
 800041a:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800041c:	4b26      	ldr	r3, [pc, #152]	@ (80004b8 <init_tasks_stack+0xf0>)
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <init_tasks_stack+0x110>)
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000422:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000424:	4a2d      	ldr	r2, [pc, #180]	@ (80004dc <init_tasks_stack+0x114>)
 8000426:	63da      	str	r2, [r3, #60]	@ 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000428:	4b23      	ldr	r3, [pc, #140]	@ (80004b8 <init_tasks_stack+0xf0>)
 800042a:	4a29      	ldr	r2, [pc, #164]	@ (80004d0 <init_tasks_stack+0x108>)
 800042c:	64da      	str	r2, [r3, #76]	@ 0x4c

	uint32_t* pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 800042e:	2300      	movs	r3, #0
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	e037      	b.n	80004a4 <init_tasks_stack+0xdc>
		pPSP = (uint32_t*) user_tasks[i].pspVal;
 8000434:	4a20      	ldr	r2, [pc, #128]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	4413      	add	r3, r2
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	60fb      	str	r3, [r7, #12]

		pPSP --; //XPSR
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3b04      	subs	r3, #4
 8000444:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //Should always be 0x01000000 to be in thumb set instructions
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800044c:	601a      	str	r2, [r3, #0]

		pPSP --; //PC
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3b04      	subs	r3, #4
 8000452:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000454:	4a18      	ldr	r2, [pc, #96]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	011b      	lsls	r3, r3, #4
 800045a:	4413      	add	r3, r2
 800045c:	330c      	adds	r3, #12
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	461a      	mov	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	601a      	str	r2, [r3, #0]

		pPSP --; //LR
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3b04      	subs	r3, #4
 800046a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f06f 0202 	mvn.w	r2, #2
 8000472:	601a      	str	r2, [r3, #0]

		//Sets the other reigsters to 0
		for (int j = 0; j < 13; j++) {
 8000474:	2300      	movs	r3, #0
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	e008      	b.n	800048c <init_tasks_stack+0xc4>
			pPSP --;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3b04      	subs	r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b0c      	cmp	r3, #12
 8000490:	ddf3      	ble.n	800047a <init_tasks_stack+0xb2>
		}

		user_tasks[i].pspVal = (uint32_t)pPSP; //Stores value of pPSP in global array
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4908      	ldr	r1, [pc, #32]	@ (80004b8 <init_tasks_stack+0xf0>)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	440b      	add	r3, r1
 800049c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	ddc4      	ble.n	8000434 <init_tasks_stack+0x6c>
	}
}
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000080 	.word	0x20000080
 80004bc:	2001f000 	.word	0x2001f000
 80004c0:	20020000 	.word	0x20020000
 80004c4:	2001fc00 	.word	0x2001fc00
 80004c8:	2001f800 	.word	0x2001f800
 80004cc:	2001f400 	.word	0x2001f400
 80004d0:	08000335 	.word	0x08000335
 80004d4:	080002cd 	.word	0x080002cd
 80004d8:	080002f1 	.word	0x080002f1
 80004dc:	08000315 	.word	0x08000315

080004e0 <enable_processor_faults>:

/*
 * Enables memory manage, bus, and usage faults
 */
void enable_processor_faults() {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
	uint32_t* pSHCSR = (uint32_t*) 0xE000ED24; //Address of System Handler Control and State Register
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <enable_processor_faults+0x38>)
 80004e8:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); //Memory Manage
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //Bus Fault
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //Usage Fault
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	e000ed24 	.word	0xe000ed24

0800051c <get_psp_value>:

uint32_t get_psp_value() {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].pspVal;
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <get_psp_value+0x18>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4a04      	ldr	r2, [pc, #16]	@ (8000538 <get_psp_value+0x1c>)
 8000526:	011b      	lsls	r3, r3, #4
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	20000000 	.word	0x20000000
 8000538:	20000080 	.word	0x20000080

0800053c <save_psp_value>:

void save_psp_value(uint32_t current_psp_val) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].pspVal = current_psp_val;
 8000544:	4b05      	ldr	r3, [pc, #20]	@ (800055c <save_psp_value+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4a05      	ldr	r2, [pc, #20]	@ (8000560 <save_psp_value+0x24>)
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000000 	.word	0x20000000
 8000560:	20000080 	.word	0x20000080

08000564 <update_next_task>:

void update_next_task() {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0

	int state = TASK_BLOCKED_STATE;
 800056a:	23ff      	movs	r3, #255	@ 0xff
 800056c:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < (MAX_TASKS); i++) {
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	e024      	b.n	80005be <update_next_task+0x5a>
		current_task++;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <update_next_task+0x7c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <update_next_task+0x7c>)
 800057e:	701a      	strb	r2, [r3, #0]
		current_task = current_task % MAX_TASKS; //When it reaches Max Tasks it will start at beginning again
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <update_next_task+0x7c>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <update_next_task+0x80>)
 8000586:	fba3 1302 	umull	r1, r3, r3, r2
 800058a:	0899      	lsrs	r1, r3, #2
 800058c:	460b      	mov	r3, r1
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <update_next_task+0x7c>)
 8000598:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].currentState;
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <update_next_task+0x7c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4a12      	ldr	r2, [pc, #72]	@ (80005e8 <update_next_task+0x84>)
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	4413      	add	r3, r2
 80005a4:	3308      	adds	r3, #8
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	607b      	str	r3, [r7, #4]
		if ( (state == TASK_READY_STATE) && (current_task != 0) ) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d103      	bne.n	80005b8 <update_next_task+0x54>
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <update_next_task+0x7c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d106      	bne.n	80005c6 <update_next_task+0x62>
	for (int i = 0; i < (MAX_TASKS); i++) {
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	ddd7      	ble.n	8000574 <update_next_task+0x10>
 80005c4:	e000      	b.n	80005c8 <update_next_task+0x64>
			break;
 80005c6:	bf00      	nop
		}
	}
	if (state != TASK_READY_STATE) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <update_next_task+0x70>
		current_task = 0;
 80005ce:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <update_next_task+0x7c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	cccccccd 	.word	0xcccccccd
 80005e8:	20000080 	.word	0x20000080

080005ec <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp() {
	//1) Initialize PSP with Task1 Stack start address

	__asm volatile("PUSH {LR}"); //Pushes LR to the main to the stack
 80005ec:	b500      	push	{lr}
	__asm volatile("BL get_psp_value"); //Gets value of current PSP in R0
 80005ee:	f7ff ff95 	bl	800051c <get_psp_value>
	__asm volatile("MSR PSP, R0"); //Initialize PSP
 80005f2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); //Pops LR from the stack
 80005f6:	f85d eb04 	ldr.w	lr, [sp], #4

	//2) Change SP to PSP with CONTROL Register
	__asm volatile ("MOV R0, #0x02"); //If Second bit of CONTROL Register is 1, then SP is now PSP
 80005fa:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0"); //Sets SP to PSP
 80005fe:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR"); //Connects back to the main function
 8000602:	4770      	bx	lr
}
 8000604:	bf00      	nop
	...

08000608 <schedule>:

void schedule() {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	uint32_t* pICSR = (uint32_t*)  0xE000ED04; //ICSR address
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <schedule+0x20>)
 8000610:	607b      	str	r3, [r7, #4]
	//pend the SV Exception
	*pICSR |= (1 << 28);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000ed04 	.word	0xe000ed04

0800062c <task_delay>:

void task_delay(uint32_t tickCount) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	//Disable the interrupt
	INTERRUPT_DISABLE();
 8000634:	f04f 0001 	mov.w	r0, #1
 8000638:	f380 8810 	msr	PRIMASK, r0

	if (current_task) {
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <task_delay+0x54>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d015      	beq.n	8000670 <task_delay+0x44>
		user_tasks[current_task].blockCount = g_tick_count + tickCount;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <task_delay+0x58>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <task_delay+0x54>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	441a      	add	r2, r3
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <task_delay+0x5c>)
 8000654:	0103      	lsls	r3, r0, #4
 8000656:	440b      	add	r3, r1
 8000658:	3304      	adds	r3, #4
 800065a:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].currentState = TASK_BLOCKED_STATE;
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <task_delay+0x54>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <task_delay+0x5c>)
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	4413      	add	r3, r2
 8000666:	3308      	adds	r3, #8
 8000668:	22ff      	movs	r2, #255	@ 0xff
 800066a:	701a      	strb	r2, [r3, #0]
		schedule();
 800066c:	f7ff ffcc 	bl	8000608 <schedule>
	}

	//Enable the interrupt
	INTERRUPT_ENABLE();
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	f380 8810 	msr	PRIMASK, r0
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	2000007c 	.word	0x2000007c
 8000688:	20000080 	.word	0x20000080

0800068c <PendSV_Handler>:
	/*
		 * Save the context of the current task
		 */

		//1) Get current running task's PSP value
		__asm volatile("MRS R0, PSP");
 800068c:	f3ef 8009 	mrs	r0, PSP

		//2) Using that PSP value store Stack frame 2 from R4 to R11
		__asm volatile("STMDB R0!, {R4-R11}");
 8000690:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile("PUSH {LR}"); //Save LR
 8000694:	b500      	push	{lr}

		//3) Save the current value of PSP
		__asm volatile("BL save_psp_value");
 8000696:	f7ff ff51 	bl	800053c <save_psp_value>
		/*
		 * Retrieve context of next task
		 */

		//1) Find next task
		__asm volatile("BL update_next_task");
 800069a:	f7ff ff63 	bl	8000564 <update_next_task>

		//2) get its old PSP val
		__asm volatile("BL get_psp_value");
 800069e:	f7ff ff3d 	bl	800051c <get_psp_value>

		//3) Using the old PSP val, retrieve R4 to R11
		__asm volatile("LDMIA R0, {R4-R11}");
 80006a2:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

		//4) update the PSP and exit handler
		__asm volatile("MSR PSP, R0");
 80006a6:	f380 8809 	msr	PSP, r0

		__asm volatile("POP {LR}");
 80006aa:	f85d eb04 	ldr.w	lr, [sp], #4

		__asm volatile("BX LR");
 80006ae:	4770      	bx	lr

}
 80006b0:	bf00      	nop
	...

080006b4 <unblock_tasks>:

void unblock_tasks() {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TASKS; i++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e01b      	b.n	80006f8 <unblock_tasks+0x44>
		if (user_tasks[i].currentState != TASK_READY_STATE) {
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d010      	beq.n	80006f2 <unblock_tasks+0x3e>
			if (user_tasks[i].blockCount == g_tick_count) {
 80006d0:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <unblock_tasks+0x58>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	3304      	adds	r3, #4
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <unblock_tasks+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d106      	bne.n	80006f2 <unblock_tasks+0x3e>
				user_tasks[i].currentState = TASK_READY_STATE;
 80006e4:	4a09      	ldr	r2, [pc, #36]	@ (800070c <unblock_tasks+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3308      	adds	r3, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	dde0      	ble.n	80006c0 <unblock_tasks+0xc>
			}
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080
 8000710:	2000007c 	.word	0x2000007c

08000714 <update_global_tick_count>:

void update_global_tick_count() {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <update_global_tick_count+0x18>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a03      	ldr	r2, [pc, #12]	@ (800072c <update_global_tick_count+0x18>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	2000007c 	.word	0x2000007c

08000730 <SysTick_Handler>:

void SysTick_Handler() {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

	uint32_t* pICSR = (uint32_t*)  0xE000ED04; //ICSR address
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <SysTick_Handler+0x28>)
 8000738:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 800073a:	f7ff ffeb 	bl	8000714 <update_global_tick_count>
	unblock_tasks();
 800073e:	f7ff ffb9 	bl	80006b4 <unblock_tasks>

	//pend the SV Exception
	*pICSR |= (1 << 28);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000ed04 	.word	0xe000ed04

0800075c <HardFault_Handler>:

void HardFault_Handler() {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	printf("HardFault Exception\n");
 8000760:	4802      	ldr	r0, [pc, #8]	@ (800076c <HardFault_Handler+0x10>)
 8000762:	f000 fa21 	bl	8000ba8 <puts>
	while(1);
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <HardFault_Handler+0xa>
 800076a:	bf00      	nop
 800076c:	080012e0 	.word	0x080012e0

08000770 <MemManage_Handler>:
}

void MemManage_Handler() {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	printf("MemManage Exception\n");
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <MemManage_Handler+0x10>)
 8000776:	f000 fa17 	bl	8000ba8 <puts>
	while(1);
 800077a:	bf00      	nop
 800077c:	e7fd      	b.n	800077a <MemManage_Handler+0xa>
 800077e:	bf00      	nop
 8000780:	080012f4 	.word	0x080012f4

08000784 <BusFault_Handler>:
}

void BusFault_Handler() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	printf("BusFault Exception\n");
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <BusFault_Handler+0x10>)
 800078a:	f000 fa0d 	bl	8000ba8 <puts>
	while(1);
 800078e:	bf00      	nop
 8000790:	e7fd      	b.n	800078e <BusFault_Handler+0xa>
 8000792:	bf00      	nop
 8000794:	08001308 	.word	0x08001308

08000798 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <ITM_SendChar+0x44>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <ITM_SendChar+0x44>)
 80007a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <ITM_SendChar+0x48>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a0b      	ldr	r2, [pc, #44]	@ (80007e0 <ITM_SendChar+0x48>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007ba:	bf00      	nop
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f8      	beq.n	80007bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007ca:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	e000edfc 	.word	0xe000edfc
 80007e0:	e0000e00 	.word	0xe0000e00

080007e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e00a      	b.n	800080c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007f6:	f3af 8000 	nop.w
 80007fa:	4601      	mov	r1, r0
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	b2ca      	uxtb	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbf0      	blt.n	80007f6 <_read+0x12>
  }

  return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	e009      	b.n	8000844 <_write+0x26>
  {
      // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffad 	bl	8000798 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf1      	blt.n	8000830 <_write+0x12>
  }
  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_close>:

int _close(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800087c:	605a      	str	r2, [r3, #4]
  return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <_isatty>:

int _isatty(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
	...

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	@ (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f000 fa8c 	bl	8000e04 <__errno>
 80008ec:	4603      	mov	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <_sbrk+0x64>)
 8000908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20020000 	.word	0x20020000
 8000918:	00000400 	.word	0x00000400
 800091c:	200000d0 	.word	0x200000d0
 8000920:	20000220 	.word	0x20000220

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 fa5d 	bl	8000e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fca1 	bl	800029c <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000968:	08001324 	.word	0x08001324
  ldr r2, =_sbss
 800096c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000970:	20000220 	.word	0x20000220

08000974 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC_IRQHandler>
	...

08000978 <std>:
 8000978:	2300      	movs	r3, #0
 800097a:	b510      	push	{r4, lr}
 800097c:	4604      	mov	r4, r0
 800097e:	e9c0 3300 	strd	r3, r3, [r0]
 8000982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000986:	6083      	str	r3, [r0, #8]
 8000988:	8181      	strh	r1, [r0, #12]
 800098a:	6643      	str	r3, [r0, #100]	@ 0x64
 800098c:	81c2      	strh	r2, [r0, #14]
 800098e:	6183      	str	r3, [r0, #24]
 8000990:	4619      	mov	r1, r3
 8000992:	2208      	movs	r2, #8
 8000994:	305c      	adds	r0, #92	@ 0x5c
 8000996:	f000 f9e7 	bl	8000d68 <memset>
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <std+0x58>)
 800099c:	6263      	str	r3, [r4, #36]	@ 0x24
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <std+0x5c>)
 80009a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <std+0x60>)
 80009a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <std+0x64>)
 80009a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <std+0x68>)
 80009ac:	6224      	str	r4, [r4, #32]
 80009ae:	429c      	cmp	r4, r3
 80009b0:	d006      	beq.n	80009c0 <std+0x48>
 80009b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80009b6:	4294      	cmp	r4, r2
 80009b8:	d002      	beq.n	80009c0 <std+0x48>
 80009ba:	33d0      	adds	r3, #208	@ 0xd0
 80009bc:	429c      	cmp	r4, r3
 80009be:	d105      	bne.n	80009cc <std+0x54>
 80009c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80009c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c8:	f000 ba46 	b.w	8000e58 <__retarget_lock_init_recursive>
 80009cc:	bd10      	pop	{r4, pc}
 80009ce:	bf00      	nop
 80009d0:	08000bb9 	.word	0x08000bb9
 80009d4:	08000bdb 	.word	0x08000bdb
 80009d8:	08000c13 	.word	0x08000c13
 80009dc:	08000c37 	.word	0x08000c37
 80009e0:	200000d4 	.word	0x200000d4

080009e4 <stdio_exit_handler>:
 80009e4:	4a02      	ldr	r2, [pc, #8]	@ (80009f0 <stdio_exit_handler+0xc>)
 80009e6:	4903      	ldr	r1, [pc, #12]	@ (80009f4 <stdio_exit_handler+0x10>)
 80009e8:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <stdio_exit_handler+0x14>)
 80009ea:	f000 b869 	b.w	8000ac0 <_fwalk_sglue>
 80009ee:	bf00      	nop
 80009f0:	20000004 	.word	0x20000004
 80009f4:	08001151 	.word	0x08001151
 80009f8:	20000014 	.word	0x20000014

080009fc <cleanup_stdio>:
 80009fc:	6841      	ldr	r1, [r0, #4]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <cleanup_stdio+0x34>)
 8000a00:	4299      	cmp	r1, r3
 8000a02:	b510      	push	{r4, lr}
 8000a04:	4604      	mov	r4, r0
 8000a06:	d001      	beq.n	8000a0c <cleanup_stdio+0x10>
 8000a08:	f000 fba2 	bl	8001150 <_fflush_r>
 8000a0c:	68a1      	ldr	r1, [r4, #8]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <cleanup_stdio+0x38>)
 8000a10:	4299      	cmp	r1, r3
 8000a12:	d002      	beq.n	8000a1a <cleanup_stdio+0x1e>
 8000a14:	4620      	mov	r0, r4
 8000a16:	f000 fb9b 	bl	8001150 <_fflush_r>
 8000a1a:	68e1      	ldr	r1, [r4, #12]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <cleanup_stdio+0x3c>)
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d004      	beq.n	8000a2c <cleanup_stdio+0x30>
 8000a22:	4620      	mov	r0, r4
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a28:	f000 bb92 	b.w	8001150 <_fflush_r>
 8000a2c:	bd10      	pop	{r4, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	2000013c 	.word	0x2000013c
 8000a38:	200001a4 	.word	0x200001a4

08000a3c <global_stdio_init.part.0>:
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <global_stdio_init.part.0+0x30>)
 8000a40:	4c0b      	ldr	r4, [pc, #44]	@ (8000a70 <global_stdio_init.part.0+0x34>)
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <global_stdio_init.part.0+0x38>)
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4620      	mov	r0, r4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	f7ff ff94 	bl	8000978 <std>
 8000a50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000a54:	2201      	movs	r2, #1
 8000a56:	2109      	movs	r1, #9
 8000a58:	f7ff ff8e 	bl	8000978 <std>
 8000a5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000a60:	2202      	movs	r2, #2
 8000a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a66:	2112      	movs	r1, #18
 8000a68:	f7ff bf86 	b.w	8000978 <std>
 8000a6c:	2000020c 	.word	0x2000020c
 8000a70:	200000d4 	.word	0x200000d4
 8000a74:	080009e5 	.word	0x080009e5

08000a78 <__sfp_lock_acquire>:
 8000a78:	4801      	ldr	r0, [pc, #4]	@ (8000a80 <__sfp_lock_acquire+0x8>)
 8000a7a:	f000 b9ee 	b.w	8000e5a <__retarget_lock_acquire_recursive>
 8000a7e:	bf00      	nop
 8000a80:	20000215 	.word	0x20000215

08000a84 <__sfp_lock_release>:
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <__sfp_lock_release+0x8>)
 8000a86:	f000 b9e9 	b.w	8000e5c <__retarget_lock_release_recursive>
 8000a8a:	bf00      	nop
 8000a8c:	20000215 	.word	0x20000215

08000a90 <__sinit>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fff0 	bl	8000a78 <__sfp_lock_acquire>
 8000a98:	6a23      	ldr	r3, [r4, #32]
 8000a9a:	b11b      	cbz	r3, 8000aa4 <__sinit+0x14>
 8000a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa0:	f7ff bff0 	b.w	8000a84 <__sfp_lock_release>
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__sinit+0x28>)
 8000aa6:	6223      	str	r3, [r4, #32]
 8000aa8:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <__sinit+0x2c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f5      	bne.n	8000a9c <__sinit+0xc>
 8000ab0:	f7ff ffc4 	bl	8000a3c <global_stdio_init.part.0>
 8000ab4:	e7f2      	b.n	8000a9c <__sinit+0xc>
 8000ab6:	bf00      	nop
 8000ab8:	080009fd 	.word	0x080009fd
 8000abc:	2000020c 	.word	0x2000020c

08000ac0 <_fwalk_sglue>:
 8000ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac4:	4607      	mov	r7, r0
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	4614      	mov	r4, r2
 8000aca:	2600      	movs	r6, #0
 8000acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8000ad4:	d505      	bpl.n	8000ae2 <_fwalk_sglue+0x22>
 8000ad6:	6824      	ldr	r4, [r4, #0]
 8000ad8:	2c00      	cmp	r4, #0
 8000ada:	d1f7      	bne.n	8000acc <_fwalk_sglue+0xc>
 8000adc:	4630      	mov	r0, r6
 8000ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ae2:	89ab      	ldrh	r3, [r5, #12]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d907      	bls.n	8000af8 <_fwalk_sglue+0x38>
 8000ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aec:	3301      	adds	r3, #1
 8000aee:	d003      	beq.n	8000af8 <_fwalk_sglue+0x38>
 8000af0:	4629      	mov	r1, r5
 8000af2:	4638      	mov	r0, r7
 8000af4:	47c0      	blx	r8
 8000af6:	4306      	orrs	r6, r0
 8000af8:	3568      	adds	r5, #104	@ 0x68
 8000afa:	e7e9      	b.n	8000ad0 <_fwalk_sglue+0x10>

08000afc <_puts_r>:
 8000afc:	6a03      	ldr	r3, [r0, #32]
 8000afe:	b570      	push	{r4, r5, r6, lr}
 8000b00:	6884      	ldr	r4, [r0, #8]
 8000b02:	4605      	mov	r5, r0
 8000b04:	460e      	mov	r6, r1
 8000b06:	b90b      	cbnz	r3, 8000b0c <_puts_r+0x10>
 8000b08:	f7ff ffc2 	bl	8000a90 <__sinit>
 8000b0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b0e:	07db      	lsls	r3, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_puts_r+0x22>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	0598      	lsls	r0, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_puts_r+0x22>
 8000b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b1a:	f000 f99e 	bl	8000e5a <__retarget_lock_acquire_recursive>
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	0719      	lsls	r1, r3, #28
 8000b22:	d502      	bpl.n	8000b2a <_puts_r+0x2e>
 8000b24:	6923      	ldr	r3, [r4, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d135      	bne.n	8000b96 <_puts_r+0x9a>
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 f8c5 	bl	8000cbc <__swsetup_r>
 8000b32:	b380      	cbz	r0, 8000b96 <_puts_r+0x9a>
 8000b34:	f04f 35ff 	mov.w	r5, #4294967295
 8000b38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b3a:	07da      	lsls	r2, r3, #31
 8000b3c:	d405      	bmi.n	8000b4a <_puts_r+0x4e>
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	059b      	lsls	r3, r3, #22
 8000b42:	d402      	bmi.n	8000b4a <_puts_r+0x4e>
 8000b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b46:	f000 f989 	bl	8000e5c <__retarget_lock_release_recursive>
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	da04      	bge.n	8000b5c <_puts_r+0x60>
 8000b52:	69a2      	ldr	r2, [r4, #24]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dc17      	bgt.n	8000b88 <_puts_r+0x8c>
 8000b58:	290a      	cmp	r1, #10
 8000b5a:	d015      	beq.n	8000b88 <_puts_r+0x8c>
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	6022      	str	r2, [r4, #0]
 8000b62:	7019      	strb	r1, [r3, #0]
 8000b64:	68a3      	ldr	r3, [r4, #8]
 8000b66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	60a3      	str	r3, [r4, #8]
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d1ed      	bne.n	8000b4e <_puts_r+0x52>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da11      	bge.n	8000b9a <_puts_r+0x9e>
 8000b76:	4622      	mov	r2, r4
 8000b78:	210a      	movs	r1, #10
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 f85f 	bl	8000c3e <__swbuf_r>
 8000b80:	3001      	adds	r0, #1
 8000b82:	d0d7      	beq.n	8000b34 <_puts_r+0x38>
 8000b84:	250a      	movs	r5, #10
 8000b86:	e7d7      	b.n	8000b38 <_puts_r+0x3c>
 8000b88:	4622      	mov	r2, r4
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 f857 	bl	8000c3e <__swbuf_r>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d1e7      	bne.n	8000b64 <_puts_r+0x68>
 8000b94:	e7ce      	b.n	8000b34 <_puts_r+0x38>
 8000b96:	3e01      	subs	r6, #1
 8000b98:	e7e4      	b.n	8000b64 <_puts_r+0x68>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	6022      	str	r2, [r4, #0]
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e7ee      	b.n	8000b84 <_puts_r+0x88>
	...

08000ba8 <puts>:
 8000ba8:	4b02      	ldr	r3, [pc, #8]	@ (8000bb4 <puts+0xc>)
 8000baa:	4601      	mov	r1, r0
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f7ff bfa5 	b.w	8000afc <_puts_r>
 8000bb2:	bf00      	nop
 8000bb4:	20000010 	.word	0x20000010

08000bb8 <__sread>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	460c      	mov	r4, r1
 8000bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc0:	f000 f8fc 	bl	8000dbc <_read_r>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	bfab      	itete	ge
 8000bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bca:	89a3      	ldrhlt	r3, [r4, #12]
 8000bcc:	181b      	addge	r3, r3, r0
 8000bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bd2:	bfac      	ite	ge
 8000bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bd6:	81a3      	strhlt	r3, [r4, #12]
 8000bd8:	bd10      	pop	{r4, pc}

08000bda <__swrite>:
 8000bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bde:	461f      	mov	r7, r3
 8000be0:	898b      	ldrh	r3, [r1, #12]
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	4605      	mov	r5, r0
 8000be6:	460c      	mov	r4, r1
 8000be8:	4616      	mov	r6, r2
 8000bea:	d505      	bpl.n	8000bf8 <__swrite+0x1e>
 8000bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f000 f8d0 	bl	8000d98 <_lseek_r>
 8000bf8:	89a3      	ldrh	r3, [r4, #12]
 8000bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c02:	81a3      	strh	r3, [r4, #12]
 8000c04:	4632      	mov	r2, r6
 8000c06:	463b      	mov	r3, r7
 8000c08:	4628      	mov	r0, r5
 8000c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0e:	f000 b8e7 	b.w	8000de0 <_write_r>

08000c12 <__sseek>:
 8000c12:	b510      	push	{r4, lr}
 8000c14:	460c      	mov	r4, r1
 8000c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1a:	f000 f8bd 	bl	8000d98 <_lseek_r>
 8000c1e:	1c43      	adds	r3, r0, #1
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	bf15      	itete	ne
 8000c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c2e:	81a3      	strheq	r3, [r4, #12]
 8000c30:	bf18      	it	ne
 8000c32:	81a3      	strhne	r3, [r4, #12]
 8000c34:	bd10      	pop	{r4, pc}

08000c36 <__sclose>:
 8000c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c3a:	f000 b89d 	b.w	8000d78 <_close_r>

08000c3e <__swbuf_r>:
 8000c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c40:	460e      	mov	r6, r1
 8000c42:	4614      	mov	r4, r2
 8000c44:	4605      	mov	r5, r0
 8000c46:	b118      	cbz	r0, 8000c50 <__swbuf_r+0x12>
 8000c48:	6a03      	ldr	r3, [r0, #32]
 8000c4a:	b90b      	cbnz	r3, 8000c50 <__swbuf_r+0x12>
 8000c4c:	f7ff ff20 	bl	8000a90 <__sinit>
 8000c50:	69a3      	ldr	r3, [r4, #24]
 8000c52:	60a3      	str	r3, [r4, #8]
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	071a      	lsls	r2, r3, #28
 8000c58:	d501      	bpl.n	8000c5e <__swbuf_r+0x20>
 8000c5a:	6923      	ldr	r3, [r4, #16]
 8000c5c:	b943      	cbnz	r3, 8000c70 <__swbuf_r+0x32>
 8000c5e:	4621      	mov	r1, r4
 8000c60:	4628      	mov	r0, r5
 8000c62:	f000 f82b 	bl	8000cbc <__swsetup_r>
 8000c66:	b118      	cbz	r0, 8000c70 <__swbuf_r+0x32>
 8000c68:	f04f 37ff 	mov.w	r7, #4294967295
 8000c6c:	4638      	mov	r0, r7
 8000c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	6922      	ldr	r2, [r4, #16]
 8000c74:	1a98      	subs	r0, r3, r2
 8000c76:	6963      	ldr	r3, [r4, #20]
 8000c78:	b2f6      	uxtb	r6, r6
 8000c7a:	4283      	cmp	r3, r0
 8000c7c:	4637      	mov	r7, r6
 8000c7e:	dc05      	bgt.n	8000c8c <__swbuf_r+0x4e>
 8000c80:	4621      	mov	r1, r4
 8000c82:	4628      	mov	r0, r5
 8000c84:	f000 fa64 	bl	8001150 <_fflush_r>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d1ed      	bne.n	8000c68 <__swbuf_r+0x2a>
 8000c8c:	68a3      	ldr	r3, [r4, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60a3      	str	r3, [r4, #8]
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	6022      	str	r2, [r4, #0]
 8000c98:	701e      	strb	r6, [r3, #0]
 8000c9a:	6962      	ldr	r2, [r4, #20]
 8000c9c:	1c43      	adds	r3, r0, #1
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d004      	beq.n	8000cac <__swbuf_r+0x6e>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	07db      	lsls	r3, r3, #31
 8000ca6:	d5e1      	bpl.n	8000c6c <__swbuf_r+0x2e>
 8000ca8:	2e0a      	cmp	r6, #10
 8000caa:	d1df      	bne.n	8000c6c <__swbuf_r+0x2e>
 8000cac:	4621      	mov	r1, r4
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f000 fa4e 	bl	8001150 <_fflush_r>
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d0d9      	beq.n	8000c6c <__swbuf_r+0x2e>
 8000cb8:	e7d6      	b.n	8000c68 <__swbuf_r+0x2a>
	...

08000cbc <__swsetup_r>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <__swsetup_r+0xa8>)
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	b118      	cbz	r0, 8000cd0 <__swsetup_r+0x14>
 8000cc8:	6a03      	ldr	r3, [r0, #32]
 8000cca:	b90b      	cbnz	r3, 8000cd0 <__swsetup_r+0x14>
 8000ccc:	f7ff fee0 	bl	8000a90 <__sinit>
 8000cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cd4:	0719      	lsls	r1, r3, #28
 8000cd6:	d422      	bmi.n	8000d1e <__swsetup_r+0x62>
 8000cd8:	06da      	lsls	r2, r3, #27
 8000cda:	d407      	bmi.n	8000cec <__swsetup_r+0x30>
 8000cdc:	2209      	movs	r2, #9
 8000cde:	602a      	str	r2, [r5, #0]
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce4:	81a3      	strh	r3, [r4, #12]
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cea:	e033      	b.n	8000d54 <__swsetup_r+0x98>
 8000cec:	0758      	lsls	r0, r3, #29
 8000cee:	d512      	bpl.n	8000d16 <__swsetup_r+0x5a>
 8000cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000cf2:	b141      	cbz	r1, 8000d06 <__swsetup_r+0x4a>
 8000cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d002      	beq.n	8000d02 <__swsetup_r+0x46>
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f000 f8af 	bl	8000e60 <_free_r>
 8000d02:	2300      	movs	r3, #0
 8000d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d06:	89a3      	ldrh	r3, [r4, #12]
 8000d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d0c:	81a3      	strh	r3, [r4, #12]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6063      	str	r3, [r4, #4]
 8000d12:	6923      	ldr	r3, [r4, #16]
 8000d14:	6023      	str	r3, [r4, #0]
 8000d16:	89a3      	ldrh	r3, [r4, #12]
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	81a3      	strh	r3, [r4, #12]
 8000d1e:	6923      	ldr	r3, [r4, #16]
 8000d20:	b94b      	cbnz	r3, 8000d36 <__swsetup_r+0x7a>
 8000d22:	89a3      	ldrh	r3, [r4, #12]
 8000d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d2c:	d003      	beq.n	8000d36 <__swsetup_r+0x7a>
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4628      	mov	r0, r5
 8000d32:	f000 fa5b 	bl	80011ec <__smakebuf_r>
 8000d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d3a:	f013 0201 	ands.w	r2, r3, #1
 8000d3e:	d00a      	beq.n	8000d56 <__swsetup_r+0x9a>
 8000d40:	2200      	movs	r2, #0
 8000d42:	60a2      	str	r2, [r4, #8]
 8000d44:	6962      	ldr	r2, [r4, #20]
 8000d46:	4252      	negs	r2, r2
 8000d48:	61a2      	str	r2, [r4, #24]
 8000d4a:	6922      	ldr	r2, [r4, #16]
 8000d4c:	b942      	cbnz	r2, 8000d60 <__swsetup_r+0xa4>
 8000d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d52:	d1c5      	bne.n	8000ce0 <__swsetup_r+0x24>
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	0799      	lsls	r1, r3, #30
 8000d58:	bf58      	it	pl
 8000d5a:	6962      	ldrpl	r2, [r4, #20]
 8000d5c:	60a2      	str	r2, [r4, #8]
 8000d5e:	e7f4      	b.n	8000d4a <__swsetup_r+0x8e>
 8000d60:	2000      	movs	r0, #0
 8000d62:	e7f7      	b.n	8000d54 <__swsetup_r+0x98>
 8000d64:	20000010 	.word	0x20000010

08000d68 <memset>:
 8000d68:	4402      	add	r2, r0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d100      	bne.n	8000d72 <memset+0xa>
 8000d70:	4770      	bx	lr
 8000d72:	f803 1b01 	strb.w	r1, [r3], #1
 8000d76:	e7f9      	b.n	8000d6c <memset+0x4>

08000d78 <_close_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4d06      	ldr	r5, [pc, #24]	@ (8000d94 <_close_r+0x1c>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	f7ff fd67 	bl	8000856 <_close>
 8000d88:	1c43      	adds	r3, r0, #1
 8000d8a:	d102      	bne.n	8000d92 <_close_r+0x1a>
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	b103      	cbz	r3, 8000d92 <_close_r+0x1a>
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
 8000d94:	20000210 	.word	0x20000210

08000d98 <_lseek_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4d07      	ldr	r5, [pc, #28]	@ (8000db8 <_lseek_r+0x20>)
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	4611      	mov	r1, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	602a      	str	r2, [r5, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f7ff fd79 	bl	800089e <_lseek>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_lseek_r+0x1e>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_lseek_r+0x1e>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	20000210 	.word	0x20000210

08000dbc <_read_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	@ (8000ddc <_read_r+0x20>)
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	602a      	str	r2, [r5, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f7ff fd0a 	bl	80007e4 <_read>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_read_r+0x1e>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_read_r+0x1e>
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	20000210 	.word	0x20000210

08000de0 <_write_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d07      	ldr	r5, [pc, #28]	@ (8000e00 <_write_r+0x20>)
 8000de4:	4604      	mov	r4, r0
 8000de6:	4608      	mov	r0, r1
 8000de8:	4611      	mov	r1, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	602a      	str	r2, [r5, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f7ff fd15 	bl	800081e <_write>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_write_r+0x1e>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_write_r+0x1e>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	20000210 	.word	0x20000210

08000e04 <__errno>:
 8000e04:	4b01      	ldr	r3, [pc, #4]	@ (8000e0c <__errno+0x8>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000010 	.word	0x20000010

08000e10 <__libc_init_array>:
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	4d0d      	ldr	r5, [pc, #52]	@ (8000e48 <__libc_init_array+0x38>)
 8000e14:	4c0d      	ldr	r4, [pc, #52]	@ (8000e4c <__libc_init_array+0x3c>)
 8000e16:	1b64      	subs	r4, r4, r5
 8000e18:	10a4      	asrs	r4, r4, #2
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	42a6      	cmp	r6, r4
 8000e1e:	d109      	bne.n	8000e34 <__libc_init_array+0x24>
 8000e20:	4d0b      	ldr	r5, [pc, #44]	@ (8000e50 <__libc_init_array+0x40>)
 8000e22:	4c0c      	ldr	r4, [pc, #48]	@ (8000e54 <__libc_init_array+0x44>)
 8000e24:	f000 fa50 	bl	80012c8 <_init>
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	10a4      	asrs	r4, r4, #2
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	42a6      	cmp	r6, r4
 8000e30:	d105      	bne.n	8000e3e <__libc_init_array+0x2e>
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
 8000e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e38:	4798      	blx	r3
 8000e3a:	3601      	adds	r6, #1
 8000e3c:	e7ee      	b.n	8000e1c <__libc_init_array+0xc>
 8000e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e42:	4798      	blx	r3
 8000e44:	3601      	adds	r6, #1
 8000e46:	e7f2      	b.n	8000e2e <__libc_init_array+0x1e>
 8000e48:	0800131c 	.word	0x0800131c
 8000e4c:	0800131c 	.word	0x0800131c
 8000e50:	0800131c 	.word	0x0800131c
 8000e54:	08001320 	.word	0x08001320

08000e58 <__retarget_lock_init_recursive>:
 8000e58:	4770      	bx	lr

08000e5a <__retarget_lock_acquire_recursive>:
 8000e5a:	4770      	bx	lr

08000e5c <__retarget_lock_release_recursive>:
 8000e5c:	4770      	bx	lr
	...

08000e60 <_free_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4605      	mov	r5, r0
 8000e64:	2900      	cmp	r1, #0
 8000e66:	d041      	beq.n	8000eec <_free_r+0x8c>
 8000e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e6c:	1f0c      	subs	r4, r1, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bfb8      	it	lt
 8000e72:	18e4      	addlt	r4, r4, r3
 8000e74:	f000 f8e0 	bl	8001038 <__malloc_lock>
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <_free_r+0x90>)
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	b933      	cbnz	r3, 8000e8c <_free_r+0x2c>
 8000e7e:	6063      	str	r3, [r4, #4]
 8000e80:	6014      	str	r4, [r2, #0]
 8000e82:	4628      	mov	r0, r5
 8000e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e88:	f000 b8dc 	b.w	8001044 <__malloc_unlock>
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <_free_r+0x42>
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	1821      	adds	r1, r4, r0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf01      	itttt	eq
 8000e98:	6819      	ldreq	r1, [r3, #0]
 8000e9a:	685b      	ldreq	r3, [r3, #4]
 8000e9c:	1809      	addeq	r1, r1, r0
 8000e9e:	6021      	streq	r1, [r4, #0]
 8000ea0:	e7ed      	b.n	8000e7e <_free_r+0x1e>
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b10b      	cbz	r3, 8000eac <_free_r+0x4c>
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d9fa      	bls.n	8000ea2 <_free_r+0x42>
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	1850      	adds	r0, r2, r1
 8000eb0:	42a0      	cmp	r0, r4
 8000eb2:	d10b      	bne.n	8000ecc <_free_r+0x6c>
 8000eb4:	6820      	ldr	r0, [r4, #0]
 8000eb6:	4401      	add	r1, r0
 8000eb8:	1850      	adds	r0, r2, r1
 8000eba:	4283      	cmp	r3, r0
 8000ebc:	6011      	str	r1, [r2, #0]
 8000ebe:	d1e0      	bne.n	8000e82 <_free_r+0x22>
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	6053      	str	r3, [r2, #4]
 8000ec6:	4408      	add	r0, r1
 8000ec8:	6010      	str	r0, [r2, #0]
 8000eca:	e7da      	b.n	8000e82 <_free_r+0x22>
 8000ecc:	d902      	bls.n	8000ed4 <_free_r+0x74>
 8000ece:	230c      	movs	r3, #12
 8000ed0:	602b      	str	r3, [r5, #0]
 8000ed2:	e7d6      	b.n	8000e82 <_free_r+0x22>
 8000ed4:	6820      	ldr	r0, [r4, #0]
 8000ed6:	1821      	adds	r1, r4, r0
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	bf04      	itt	eq
 8000edc:	6819      	ldreq	r1, [r3, #0]
 8000ede:	685b      	ldreq	r3, [r3, #4]
 8000ee0:	6063      	str	r3, [r4, #4]
 8000ee2:	bf04      	itt	eq
 8000ee4:	1809      	addeq	r1, r1, r0
 8000ee6:	6021      	streq	r1, [r4, #0]
 8000ee8:	6054      	str	r4, [r2, #4]
 8000eea:	e7ca      	b.n	8000e82 <_free_r+0x22>
 8000eec:	bd38      	pop	{r3, r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000021c 	.word	0x2000021c

08000ef4 <sbrk_aligned>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8000f34 <sbrk_aligned+0x40>)
 8000ef8:	460c      	mov	r4, r1
 8000efa:	6831      	ldr	r1, [r6, #0]
 8000efc:	4605      	mov	r5, r0
 8000efe:	b911      	cbnz	r1, 8000f06 <sbrk_aligned+0x12>
 8000f00:	f000 f9d2 	bl	80012a8 <_sbrk_r>
 8000f04:	6030      	str	r0, [r6, #0]
 8000f06:	4621      	mov	r1, r4
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f000 f9cd 	bl	80012a8 <_sbrk_r>
 8000f0e:	1c43      	adds	r3, r0, #1
 8000f10:	d103      	bne.n	8000f1a <sbrk_aligned+0x26>
 8000f12:	f04f 34ff 	mov.w	r4, #4294967295
 8000f16:	4620      	mov	r0, r4
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
 8000f1a:	1cc4      	adds	r4, r0, #3
 8000f1c:	f024 0403 	bic.w	r4, r4, #3
 8000f20:	42a0      	cmp	r0, r4
 8000f22:	d0f8      	beq.n	8000f16 <sbrk_aligned+0x22>
 8000f24:	1a21      	subs	r1, r4, r0
 8000f26:	4628      	mov	r0, r5
 8000f28:	f000 f9be 	bl	80012a8 <_sbrk_r>
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	d1f2      	bne.n	8000f16 <sbrk_aligned+0x22>
 8000f30:	e7ef      	b.n	8000f12 <sbrk_aligned+0x1e>
 8000f32:	bf00      	nop
 8000f34:	20000218 	.word	0x20000218

08000f38 <_malloc_r>:
 8000f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f3c:	1ccd      	adds	r5, r1, #3
 8000f3e:	f025 0503 	bic.w	r5, r5, #3
 8000f42:	3508      	adds	r5, #8
 8000f44:	2d0c      	cmp	r5, #12
 8000f46:	bf38      	it	cc
 8000f48:	250c      	movcc	r5, #12
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	db01      	blt.n	8000f54 <_malloc_r+0x1c>
 8000f50:	42a9      	cmp	r1, r5
 8000f52:	d904      	bls.n	8000f5e <_malloc_r+0x26>
 8000f54:	230c      	movs	r3, #12
 8000f56:	6033      	str	r3, [r6, #0]
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001034 <_malloc_r+0xfc>
 8000f62:	f000 f869 	bl	8001038 <__malloc_lock>
 8000f66:	f8d8 3000 	ldr.w	r3, [r8]
 8000f6a:	461c      	mov	r4, r3
 8000f6c:	bb44      	cbnz	r4, 8000fc0 <_malloc_r+0x88>
 8000f6e:	4629      	mov	r1, r5
 8000f70:	4630      	mov	r0, r6
 8000f72:	f7ff ffbf 	bl	8000ef4 <sbrk_aligned>
 8000f76:	1c43      	adds	r3, r0, #1
 8000f78:	4604      	mov	r4, r0
 8000f7a:	d158      	bne.n	800102e <_malloc_r+0xf6>
 8000f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8000f80:	4627      	mov	r7, r4
 8000f82:	2f00      	cmp	r7, #0
 8000f84:	d143      	bne.n	800100e <_malloc_r+0xd6>
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	d04b      	beq.n	8001022 <_malloc_r+0xea>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	4630      	mov	r0, r6
 8000f90:	eb04 0903 	add.w	r9, r4, r3
 8000f94:	f000 f988 	bl	80012a8 <_sbrk_r>
 8000f98:	4581      	cmp	r9, r0
 8000f9a:	d142      	bne.n	8001022 <_malloc_r+0xea>
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	1a6d      	subs	r5, r5, r1
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f7ff ffa6 	bl	8000ef4 <sbrk_aligned>
 8000fa8:	3001      	adds	r0, #1
 8000faa:	d03a      	beq.n	8001022 <_malloc_r+0xea>
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	442b      	add	r3, r5
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	bb62      	cbnz	r2, 8001014 <_malloc_r+0xdc>
 8000fba:	f8c8 7000 	str.w	r7, [r8]
 8000fbe:	e00f      	b.n	8000fe0 <_malloc_r+0xa8>
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	1b52      	subs	r2, r2, r5
 8000fc4:	d420      	bmi.n	8001008 <_malloc_r+0xd0>
 8000fc6:	2a0b      	cmp	r2, #11
 8000fc8:	d917      	bls.n	8000ffa <_malloc_r+0xc2>
 8000fca:	1961      	adds	r1, r4, r5
 8000fcc:	42a3      	cmp	r3, r4
 8000fce:	6025      	str	r5, [r4, #0]
 8000fd0:	bf18      	it	ne
 8000fd2:	6059      	strne	r1, [r3, #4]
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	bf08      	it	eq
 8000fd8:	f8c8 1000 	streq.w	r1, [r8]
 8000fdc:	5162      	str	r2, [r4, r5]
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	f000 f82f 	bl	8001044 <__malloc_unlock>
 8000fe6:	f104 000b 	add.w	r0, r4, #11
 8000fea:	1d23      	adds	r3, r4, #4
 8000fec:	f020 0007 	bic.w	r0, r0, #7
 8000ff0:	1ac2      	subs	r2, r0, r3
 8000ff2:	bf1c      	itt	ne
 8000ff4:	1a1b      	subne	r3, r3, r0
 8000ff6:	50a3      	strne	r3, [r4, r2]
 8000ff8:	e7af      	b.n	8000f5a <_malloc_r+0x22>
 8000ffa:	6862      	ldr	r2, [r4, #4]
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	bf0c      	ite	eq
 8001000:	f8c8 2000 	streq.w	r2, [r8]
 8001004:	605a      	strne	r2, [r3, #4]
 8001006:	e7eb      	b.n	8000fe0 <_malloc_r+0xa8>
 8001008:	4623      	mov	r3, r4
 800100a:	6864      	ldr	r4, [r4, #4]
 800100c:	e7ae      	b.n	8000f6c <_malloc_r+0x34>
 800100e:	463c      	mov	r4, r7
 8001010:	687f      	ldr	r7, [r7, #4]
 8001012:	e7b6      	b.n	8000f82 <_malloc_r+0x4a>
 8001014:	461a      	mov	r2, r3
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	42a3      	cmp	r3, r4
 800101a:	d1fb      	bne.n	8001014 <_malloc_r+0xdc>
 800101c:	2300      	movs	r3, #0
 800101e:	6053      	str	r3, [r2, #4]
 8001020:	e7de      	b.n	8000fe0 <_malloc_r+0xa8>
 8001022:	230c      	movs	r3, #12
 8001024:	6033      	str	r3, [r6, #0]
 8001026:	4630      	mov	r0, r6
 8001028:	f000 f80c 	bl	8001044 <__malloc_unlock>
 800102c:	e794      	b.n	8000f58 <_malloc_r+0x20>
 800102e:	6005      	str	r5, [r0, #0]
 8001030:	e7d6      	b.n	8000fe0 <_malloc_r+0xa8>
 8001032:	bf00      	nop
 8001034:	2000021c 	.word	0x2000021c

08001038 <__malloc_lock>:
 8001038:	4801      	ldr	r0, [pc, #4]	@ (8001040 <__malloc_lock+0x8>)
 800103a:	f7ff bf0e 	b.w	8000e5a <__retarget_lock_acquire_recursive>
 800103e:	bf00      	nop
 8001040:	20000214 	.word	0x20000214

08001044 <__malloc_unlock>:
 8001044:	4801      	ldr	r0, [pc, #4]	@ (800104c <__malloc_unlock+0x8>)
 8001046:	f7ff bf09 	b.w	8000e5c <__retarget_lock_release_recursive>
 800104a:	bf00      	nop
 800104c:	20000214 	.word	0x20000214

08001050 <__sflush_r>:
 8001050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	0716      	lsls	r6, r2, #28
 8001058:	4605      	mov	r5, r0
 800105a:	460c      	mov	r4, r1
 800105c:	d454      	bmi.n	8001108 <__sflush_r+0xb8>
 800105e:	684b      	ldr	r3, [r1, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	dc02      	bgt.n	800106a <__sflush_r+0x1a>
 8001064:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd48      	ble.n	80010fc <__sflush_r+0xac>
 800106a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800106c:	2e00      	cmp	r6, #0
 800106e:	d045      	beq.n	80010fc <__sflush_r+0xac>
 8001070:	2300      	movs	r3, #0
 8001072:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001076:	682f      	ldr	r7, [r5, #0]
 8001078:	6a21      	ldr	r1, [r4, #32]
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	d030      	beq.n	80010e0 <__sflush_r+0x90>
 800107e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	0759      	lsls	r1, r3, #29
 8001084:	d505      	bpl.n	8001092 <__sflush_r+0x42>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800108c:	b10b      	cbz	r3, 8001092 <__sflush_r+0x42>
 800108e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	2300      	movs	r3, #0
 8001094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001096:	6a21      	ldr	r1, [r4, #32]
 8001098:	4628      	mov	r0, r5
 800109a:	47b0      	blx	r6
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	89a3      	ldrh	r3, [r4, #12]
 80010a0:	d106      	bne.n	80010b0 <__sflush_r+0x60>
 80010a2:	6829      	ldr	r1, [r5, #0]
 80010a4:	291d      	cmp	r1, #29
 80010a6:	d82b      	bhi.n	8001100 <__sflush_r+0xb0>
 80010a8:	4a28      	ldr	r2, [pc, #160]	@ (800114c <__sflush_r+0xfc>)
 80010aa:	40ca      	lsrs	r2, r1
 80010ac:	07d6      	lsls	r6, r2, #31
 80010ae:	d527      	bpl.n	8001100 <__sflush_r+0xb0>
 80010b0:	2200      	movs	r2, #0
 80010b2:	6062      	str	r2, [r4, #4]
 80010b4:	04d9      	lsls	r1, r3, #19
 80010b6:	6922      	ldr	r2, [r4, #16]
 80010b8:	6022      	str	r2, [r4, #0]
 80010ba:	d504      	bpl.n	80010c6 <__sflush_r+0x76>
 80010bc:	1c42      	adds	r2, r0, #1
 80010be:	d101      	bne.n	80010c4 <__sflush_r+0x74>
 80010c0:	682b      	ldr	r3, [r5, #0]
 80010c2:	b903      	cbnz	r3, 80010c6 <__sflush_r+0x76>
 80010c4:	6560      	str	r0, [r4, #84]	@ 0x54
 80010c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010c8:	602f      	str	r7, [r5, #0]
 80010ca:	b1b9      	cbz	r1, 80010fc <__sflush_r+0xac>
 80010cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d002      	beq.n	80010da <__sflush_r+0x8a>
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff fec3 	bl	8000e60 <_free_r>
 80010da:	2300      	movs	r3, #0
 80010dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80010de:	e00d      	b.n	80010fc <__sflush_r+0xac>
 80010e0:	2301      	movs	r3, #1
 80010e2:	4628      	mov	r0, r5
 80010e4:	47b0      	blx	r6
 80010e6:	4602      	mov	r2, r0
 80010e8:	1c50      	adds	r0, r2, #1
 80010ea:	d1c9      	bne.n	8001080 <__sflush_r+0x30>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0c6      	beq.n	8001080 <__sflush_r+0x30>
 80010f2:	2b1d      	cmp	r3, #29
 80010f4:	d001      	beq.n	80010fa <__sflush_r+0xaa>
 80010f6:	2b16      	cmp	r3, #22
 80010f8:	d11d      	bne.n	8001136 <__sflush_r+0xe6>
 80010fa:	602f      	str	r7, [r5, #0]
 80010fc:	2000      	movs	r0, #0
 80010fe:	e021      	b.n	8001144 <__sflush_r+0xf4>
 8001100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001104:	b21b      	sxth	r3, r3
 8001106:	e01a      	b.n	800113e <__sflush_r+0xee>
 8001108:	690f      	ldr	r7, [r1, #16]
 800110a:	2f00      	cmp	r7, #0
 800110c:	d0f6      	beq.n	80010fc <__sflush_r+0xac>
 800110e:	0793      	lsls	r3, r2, #30
 8001110:	680e      	ldr	r6, [r1, #0]
 8001112:	bf08      	it	eq
 8001114:	694b      	ldreq	r3, [r1, #20]
 8001116:	600f      	str	r7, [r1, #0]
 8001118:	bf18      	it	ne
 800111a:	2300      	movne	r3, #0
 800111c:	1bf6      	subs	r6, r6, r7
 800111e:	608b      	str	r3, [r1, #8]
 8001120:	2e00      	cmp	r6, #0
 8001122:	ddeb      	ble.n	80010fc <__sflush_r+0xac>
 8001124:	6a21      	ldr	r1, [r4, #32]
 8001126:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800112a:	4633      	mov	r3, r6
 800112c:	463a      	mov	r2, r7
 800112e:	4628      	mov	r0, r5
 8001130:	47e0      	blx	ip
 8001132:	2800      	cmp	r0, #0
 8001134:	dc07      	bgt.n	8001146 <__sflush_r+0xf6>
 8001136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	81a3      	strh	r3, [r4, #12]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001146:	4407      	add	r7, r0
 8001148:	1a36      	subs	r6, r6, r0
 800114a:	e7e9      	b.n	8001120 <__sflush_r+0xd0>
 800114c:	20400001 	.word	0x20400001

08001150 <_fflush_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	690b      	ldr	r3, [r1, #16]
 8001154:	4605      	mov	r5, r0
 8001156:	460c      	mov	r4, r1
 8001158:	b913      	cbnz	r3, 8001160 <_fflush_r+0x10>
 800115a:	2500      	movs	r5, #0
 800115c:	4628      	mov	r0, r5
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	b118      	cbz	r0, 800116a <_fflush_r+0x1a>
 8001162:	6a03      	ldr	r3, [r0, #32]
 8001164:	b90b      	cbnz	r3, 800116a <_fflush_r+0x1a>
 8001166:	f7ff fc93 	bl	8000a90 <__sinit>
 800116a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f3      	beq.n	800115a <_fflush_r+0xa>
 8001172:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001174:	07d0      	lsls	r0, r2, #31
 8001176:	d404      	bmi.n	8001182 <_fflush_r+0x32>
 8001178:	0599      	lsls	r1, r3, #22
 800117a:	d402      	bmi.n	8001182 <_fflush_r+0x32>
 800117c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800117e:	f7ff fe6c 	bl	8000e5a <__retarget_lock_acquire_recursive>
 8001182:	4628      	mov	r0, r5
 8001184:	4621      	mov	r1, r4
 8001186:	f7ff ff63 	bl	8001050 <__sflush_r>
 800118a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800118c:	07da      	lsls	r2, r3, #31
 800118e:	4605      	mov	r5, r0
 8001190:	d4e4      	bmi.n	800115c <_fflush_r+0xc>
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	059b      	lsls	r3, r3, #22
 8001196:	d4e1      	bmi.n	800115c <_fflush_r+0xc>
 8001198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800119a:	f7ff fe5f 	bl	8000e5c <__retarget_lock_release_recursive>
 800119e:	e7dd      	b.n	800115c <_fflush_r+0xc>

080011a0 <__swhatbuf_r>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	460c      	mov	r4, r1
 80011a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a8:	2900      	cmp	r1, #0
 80011aa:	b096      	sub	sp, #88	@ 0x58
 80011ac:	4615      	mov	r5, r2
 80011ae:	461e      	mov	r6, r3
 80011b0:	da0d      	bge.n	80011ce <__swhatbuf_r+0x2e>
 80011b2:	89a3      	ldrh	r3, [r4, #12]
 80011b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80011b8:	f04f 0100 	mov.w	r1, #0
 80011bc:	bf14      	ite	ne
 80011be:	2340      	movne	r3, #64	@ 0x40
 80011c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80011c4:	2000      	movs	r0, #0
 80011c6:	6031      	str	r1, [r6, #0]
 80011c8:	602b      	str	r3, [r5, #0]
 80011ca:	b016      	add	sp, #88	@ 0x58
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	466a      	mov	r2, sp
 80011d0:	f000 f848 	bl	8001264 <_fstat_r>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	dbec      	blt.n	80011b2 <__swhatbuf_r+0x12>
 80011d8:	9901      	ldr	r1, [sp, #4]
 80011da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80011de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80011e2:	4259      	negs	r1, r3
 80011e4:	4159      	adcs	r1, r3
 80011e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ea:	e7eb      	b.n	80011c4 <__swhatbuf_r+0x24>

080011ec <__smakebuf_r>:
 80011ec:	898b      	ldrh	r3, [r1, #12]
 80011ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011f0:	079d      	lsls	r5, r3, #30
 80011f2:	4606      	mov	r6, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	d507      	bpl.n	8001208 <__smakebuf_r+0x1c>
 80011f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80011fc:	6023      	str	r3, [r4, #0]
 80011fe:	6123      	str	r3, [r4, #16]
 8001200:	2301      	movs	r3, #1
 8001202:	6163      	str	r3, [r4, #20]
 8001204:	b003      	add	sp, #12
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001208:	ab01      	add	r3, sp, #4
 800120a:	466a      	mov	r2, sp
 800120c:	f7ff ffc8 	bl	80011a0 <__swhatbuf_r>
 8001210:	9f00      	ldr	r7, [sp, #0]
 8001212:	4605      	mov	r5, r0
 8001214:	4639      	mov	r1, r7
 8001216:	4630      	mov	r0, r6
 8001218:	f7ff fe8e 	bl	8000f38 <_malloc_r>
 800121c:	b948      	cbnz	r0, 8001232 <__smakebuf_r+0x46>
 800121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001222:	059a      	lsls	r2, r3, #22
 8001224:	d4ee      	bmi.n	8001204 <__smakebuf_r+0x18>
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	e7e2      	b.n	80011f8 <__smakebuf_r+0xc>
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	6020      	str	r0, [r4, #0]
 8001236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123a:	81a3      	strh	r3, [r4, #12]
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001242:	b15b      	cbz	r3, 800125c <__smakebuf_r+0x70>
 8001244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001248:	4630      	mov	r0, r6
 800124a:	f000 f81d 	bl	8001288 <_isatty_r>
 800124e:	b128      	cbz	r0, 800125c <__smakebuf_r+0x70>
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	81a3      	strh	r3, [r4, #12]
 800125c:	89a3      	ldrh	r3, [r4, #12]
 800125e:	431d      	orrs	r5, r3
 8001260:	81a5      	strh	r5, [r4, #12]
 8001262:	e7cf      	b.n	8001204 <__smakebuf_r+0x18>

08001264 <_fstat_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4d07      	ldr	r5, [pc, #28]	@ (8001284 <_fstat_r+0x20>)
 8001268:	2300      	movs	r3, #0
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	f7ff fafb 	bl	800086c <_fstat>
 8001276:	1c43      	adds	r3, r0, #1
 8001278:	d102      	bne.n	8001280 <_fstat_r+0x1c>
 800127a:	682b      	ldr	r3, [r5, #0]
 800127c:	b103      	cbz	r3, 8001280 <_fstat_r+0x1c>
 800127e:	6023      	str	r3, [r4, #0]
 8001280:	bd38      	pop	{r3, r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	20000210 	.word	0x20000210

08001288 <_isatty_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	@ (80012a4 <_isatty_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff faf9 	bl	800088a <_isatty>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_isatty_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_isatty_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	20000210 	.word	0x20000210

080012a8 <_sbrk_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	4d06      	ldr	r5, [pc, #24]	@ (80012c4 <_sbrk_r+0x1c>)
 80012ac:	2300      	movs	r3, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	f7ff fb00 	bl	80008b8 <_sbrk>
 80012b8:	1c43      	adds	r3, r0, #1
 80012ba:	d102      	bne.n	80012c2 <_sbrk_r+0x1a>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	b103      	cbz	r3, 80012c2 <_sbrk_r+0x1a>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	20000210 	.word	0x20000210

080012c8 <_init>:
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	bf00      	nop
 80012cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ce:	bc08      	pop	{r3}
 80012d0:	469e      	mov	lr, r3
 80012d2:	4770      	bx	lr

080012d4 <_fini>:
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	bf00      	nop
 80012d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012da:	bc08      	pop	{r3}
 80012dc:	469e      	mov	lr, r3
 80012de:	4770      	bx	lr
