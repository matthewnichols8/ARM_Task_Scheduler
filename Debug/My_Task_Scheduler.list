
My_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d28  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000eb0  08000eb0  00001eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f04  08000f04  0000206c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f04  08000f04  0000206c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f04  08000f04  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f04  08000f04  00001f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f08  08000f08  00001f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08000f0c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000206c  2**0
                  CONTENTS
 10 .bss          0000017c  2000006c  2000006c  0000206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  0000206c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a5e  00000000  00000000  00002096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003a4  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00002e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ef  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d93  00000000  00000000  000030df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015a3  00000000  00000000  00005e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009bad  00000000  00000000  00007415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010fc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000abc  00000000  00000000  00011008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00011ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e98 	.word	0x08000e98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08000e98 	.word	0x08000e98

080001c8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START);
 80001cc:	480b      	ldr	r0, [pc, #44]	@ (80001fc <main+0x34>)
 80001ce:	f000 f875 	bl	80002bc <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <main+0x38>)
 80001d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000204 <main+0x3c>)
 80001d6:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <main+0x40>)
 80001da:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <main+0x3c>)
 80001dc:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80001de:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <main+0x44>)
 80001e0:	4b08      	ldr	r3, [pc, #32]	@ (8000204 <main+0x3c>)
 80001e2:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80001e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000210 <main+0x48>)
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <main+0x3c>)
 80001e8:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 80001ea:	f000 f86d 	bl	80002c8 <init_tasks_stack>

	init_systick_timer(TICK_HZ); //Generates SysTic Timer Exception
 80001ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f2:	f000 f82f 	bl	8000254 <init_systick_timer>

    /* Loop forever */
	for(;;);
 80001f6:	bf00      	nop
 80001f8:	e7fd      	b.n	80001f6 <main+0x2e>
 80001fa:	bf00      	nop
 80001fc:	2001f000 	.word	0x2001f000
 8000200:	08000215 	.word	0x08000215
 8000204:	20000088 	.word	0x20000088
 8000208:	08000225 	.word	0x08000225
 800020c:	08000235 	.word	0x08000235
 8000210:	08000245 	.word	0x08000245

08000214 <task1_handler>:
}


void task1_handler() {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	while(1) {
		printf("This is task 1\n");
 8000218:	4801      	ldr	r0, [pc, #4]	@ (8000220 <task1_handler+0xc>)
 800021a:	f000 faad 	bl	8000778 <puts>
 800021e:	e7fb      	b.n	8000218 <task1_handler+0x4>
 8000220:	08000eb0 	.word	0x08000eb0

08000224 <task2_handler>:
	}
}

void task2_handler() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	while(1) {
		printf("This is task 2\n");
 8000228:	4801      	ldr	r0, [pc, #4]	@ (8000230 <task2_handler+0xc>)
 800022a:	f000 faa5 	bl	8000778 <puts>
 800022e:	e7fb      	b.n	8000228 <task2_handler+0x4>
 8000230:	08000ec0 	.word	0x08000ec0

08000234 <task3_handler>:
	}
}

void task3_handler() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(1) {
		printf("This is task 3\n");
 8000238:	4801      	ldr	r0, [pc, #4]	@ (8000240 <task3_handler+0xc>)
 800023a:	f000 fa9d 	bl	8000778 <puts>
 800023e:	e7fb      	b.n	8000238 <task3_handler+0x4>
 8000240:	08000ed0 	.word	0x08000ed0

08000244 <task4_handler>:
	}
}

void task4_handler() {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	while(1) {
		printf("This is task 4\n");
 8000248:	4801      	ldr	r0, [pc, #4]	@ (8000250 <task4_handler+0xc>)
 800024a:	f000 fa95 	bl	8000778 <puts>
 800024e:	e7fb      	b.n	8000248 <task4_handler+0x4>
 8000250:	08000ee0 	.word	0x08000ee0

08000254 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz) {
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t* pSRVR = (uint32_t*)  0xE000E014; //SysTick Reload Value Register
 800025c:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <init_systick_timer+0x5c>)
 800025e:	617b      	str	r3, [r7, #20]
	uint32_t* pSCSR = (uint32_t*)  0xE000E010; //SysTick Control and Status Register
 8000260:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <init_systick_timer+0x60>)
 8000262:	613b      	str	r3, [r7, #16]
	uint32_t countVal = (SYSTICK_TIM_CLK / tick_hz) - 1; //Reload Value should be N-1 (Number of clock cycles - 1).
 8000264:	4a14      	ldr	r2, [pc, #80]	@ (80002b8 <init_systick_timer+0x64>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	3b01      	subs	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]

	//Clear value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]

	//load value into SVR
	*pSRVR |= countVal;
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	431a      	orrs	r2, r3
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	601a      	str	r2, [r3, #0]

	//Edit Settings
	*pSCSR |= (1 << 1); //Enables SysTick Exception Request
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0202 	orr.w	r2, r3, #2
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Indicates that the clock source is the processor internal clock
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 0204 	orr.w	r2, r3, #4
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	601a      	str	r2, [r3, #0]

	//Enable systick
	*pSCSR |= (1 << 0); //Enables the SysTick counter
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0201 	orr.w	r2, r3, #1
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	371c      	adds	r7, #28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	e000e014 	.word	0xe000e014
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	00f42400 	.word	0x00f42400

080002bc <init_scheduler_stack>:

/*
 * Must be a naked function to access MSP which is a special register
 */
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack) {
 80002bc:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : ); //Puts value of the top of the stack into MSP
 80002be:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); //Return from function call
 80002c2:	4770      	bx	lr
}
 80002c4:	bf00      	nop
	...

080002c8 <init_tasks_stack>:

void init_tasks_stack() {
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
	uint32_t* pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e032      	b.n	800033a <init_tasks_stack+0x72>
		pPSP = (uint32_t*) psp_of_tasks[i];
 80002d4:	4a1d      	ldr	r2, [pc, #116]	@ (800034c <init_tasks_stack+0x84>)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	60fb      	str	r3, [r7, #12]

		pPSP --; //XPSR
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; //Should always be 0x01000000 to be in thumb set instructions
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002ea:	601a      	str	r2, [r3, #0]

		pPSP --; //PC
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3b04      	subs	r3, #4
 80002f0:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 80002f2:	4a17      	ldr	r2, [pc, #92]	@ (8000350 <init_tasks_stack+0x88>)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]

		pPSP --; //LR
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3b04      	subs	r3, #4
 8000302:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f06f 0202 	mvn.w	r2, #2
 800030a:	601a      	str	r2, [r3, #0]

		//Sets the other reigsters to 0
		for (int j = 0; j < 13; j++) {
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e008      	b.n	8000324 <init_tasks_stack+0x5c>
			pPSP --;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b04      	subs	r3, #4
 8000316:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b0c      	cmp	r3, #12
 8000328:	ddf3      	ble.n	8000312 <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t)pPSP; //Stores value of pPSP in global array
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	4907      	ldr	r1, [pc, #28]	@ (800034c <init_tasks_stack+0x84>)
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	3301      	adds	r3, #1
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	2b03      	cmp	r3, #3
 800033e:	ddc9      	ble.n	80002d4 <init_tasks_stack+0xc>
	}
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000000 	.word	0x20000000
 8000350:	20000088 	.word	0x20000088

08000354 <SysTick_Handler>:

void SysTick_Handler() {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	printf("In SysTick Handler\n");
 8000358:	4802      	ldr	r0, [pc, #8]	@ (8000364 <SysTick_Handler+0x10>)
 800035a:	f000 fa0d 	bl	8000778 <puts>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	08000ef0 	.word	0x08000ef0

08000368 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <ITM_SendChar+0x44>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <ITM_SendChar+0x44>)
 8000378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800037c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800037e:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <ITM_SendChar+0x48>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <ITM_SendChar+0x48>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800038a:	bf00      	nop
 800038c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f8      	beq.n	800038c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800039a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	e000edfc 	.word	0xe000edfc
 80003b0:	e0000e00 	.word	0xe0000e00

080003b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	e00a      	b.n	80003dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003c6:	f3af 8000 	nop.w
 80003ca:	4601      	mov	r1, r0
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	60ba      	str	r2, [r7, #8]
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf0      	blt.n	80003c6 <_read+0x12>
  }

  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	e009      	b.n	8000414 <_write+0x26>
  {
      // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ffad 	bl	8000368 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697a      	ldr	r2, [r7, #20]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	dbf1      	blt.n	8000400 <_write+0x12>
  }
  return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_close>:

int _close(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800044c:	605a      	str	r2, [r3, #4]
  return 0;
 800044e:	2300      	movs	r3, #0
}
 8000450:	4618      	mov	r0, r3
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <_isatty>:

int _isatty(int file)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000462:	2301      	movs	r3, #1
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800046e:	b480      	push	{r7}
 8000470:	b085      	sub	sp, #20
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <_sbrk+0x5c>)
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <_sbrk+0x60>)
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d102      	bne.n	80004aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <_sbrk+0x64>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	@ (80004f0 <_sbrk+0x68>)
 80004a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d207      	bcs.n	80004c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b8:	f000 fa8c 	bl	80009d4 <__errno>
 80004bc:	4603      	mov	r3, r0
 80004be:	220c      	movs	r2, #12
 80004c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	e009      	b.n	80004dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <_sbrk+0x64>)
 80004d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20020000 	.word	0x20020000
 80004e8:	00000400 	.word	0x00000400
 80004ec:	20000098 	.word	0x20000098
 80004f0:	200001e8 	.word	0x200001e8

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	@ (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	@ (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	@ (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 fa5d 	bl	80009e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe4f 	bl	80001c8 <main>

0800052a <LoopForever>:

LoopForever:
  b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000538:	08000f0c 	.word	0x08000f0c
  ldr r2, =_sbss
 800053c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000540:	200001e8 	.word	0x200001e8

08000544 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_IRQHandler>
	...

08000548 <std>:
 8000548:	2300      	movs	r3, #0
 800054a:	b510      	push	{r4, lr}
 800054c:	4604      	mov	r4, r0
 800054e:	e9c0 3300 	strd	r3, r3, [r0]
 8000552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000556:	6083      	str	r3, [r0, #8]
 8000558:	8181      	strh	r1, [r0, #12]
 800055a:	6643      	str	r3, [r0, #100]	@ 0x64
 800055c:	81c2      	strh	r2, [r0, #14]
 800055e:	6183      	str	r3, [r0, #24]
 8000560:	4619      	mov	r1, r3
 8000562:	2208      	movs	r2, #8
 8000564:	305c      	adds	r0, #92	@ 0x5c
 8000566:	f000 f9e7 	bl	8000938 <memset>
 800056a:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <std+0x58>)
 800056c:	6263      	str	r3, [r4, #36]	@ 0x24
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <std+0x5c>)
 8000570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <std+0x60>)
 8000574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000576:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <std+0x64>)
 8000578:	6323      	str	r3, [r4, #48]	@ 0x30
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <std+0x68>)
 800057c:	6224      	str	r4, [r4, #32]
 800057e:	429c      	cmp	r4, r3
 8000580:	d006      	beq.n	8000590 <std+0x48>
 8000582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000586:	4294      	cmp	r4, r2
 8000588:	d002      	beq.n	8000590 <std+0x48>
 800058a:	33d0      	adds	r3, #208	@ 0xd0
 800058c:	429c      	cmp	r4, r3
 800058e:	d105      	bne.n	800059c <std+0x54>
 8000590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000598:	f000 ba46 	b.w	8000a28 <__retarget_lock_init_recursive>
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop
 80005a0:	08000789 	.word	0x08000789
 80005a4:	080007ab 	.word	0x080007ab
 80005a8:	080007e3 	.word	0x080007e3
 80005ac:	08000807 	.word	0x08000807
 80005b0:	2000009c 	.word	0x2000009c

080005b4 <stdio_exit_handler>:
 80005b4:	4a02      	ldr	r2, [pc, #8]	@ (80005c0 <stdio_exit_handler+0xc>)
 80005b6:	4903      	ldr	r1, [pc, #12]	@ (80005c4 <stdio_exit_handler+0x10>)
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <stdio_exit_handler+0x14>)
 80005ba:	f000 b869 	b.w	8000690 <_fwalk_sglue>
 80005be:	bf00      	nop
 80005c0:	20000010 	.word	0x20000010
 80005c4:	08000d21 	.word	0x08000d21
 80005c8:	20000020 	.word	0x20000020

080005cc <cleanup_stdio>:
 80005cc:	6841      	ldr	r1, [r0, #4]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <cleanup_stdio+0x34>)
 80005d0:	4299      	cmp	r1, r3
 80005d2:	b510      	push	{r4, lr}
 80005d4:	4604      	mov	r4, r0
 80005d6:	d001      	beq.n	80005dc <cleanup_stdio+0x10>
 80005d8:	f000 fba2 	bl	8000d20 <_fflush_r>
 80005dc:	68a1      	ldr	r1, [r4, #8]
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <cleanup_stdio+0x38>)
 80005e0:	4299      	cmp	r1, r3
 80005e2:	d002      	beq.n	80005ea <cleanup_stdio+0x1e>
 80005e4:	4620      	mov	r0, r4
 80005e6:	f000 fb9b 	bl	8000d20 <_fflush_r>
 80005ea:	68e1      	ldr	r1, [r4, #12]
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <cleanup_stdio+0x3c>)
 80005ee:	4299      	cmp	r1, r3
 80005f0:	d004      	beq.n	80005fc <cleanup_stdio+0x30>
 80005f2:	4620      	mov	r0, r4
 80005f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f8:	f000 bb92 	b.w	8000d20 <_fflush_r>
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	2000009c 	.word	0x2000009c
 8000604:	20000104 	.word	0x20000104
 8000608:	2000016c 	.word	0x2000016c

0800060c <global_stdio_init.part.0>:
 800060c:	b510      	push	{r4, lr}
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <global_stdio_init.part.0+0x30>)
 8000610:	4c0b      	ldr	r4, [pc, #44]	@ (8000640 <global_stdio_init.part.0+0x34>)
 8000612:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <global_stdio_init.part.0+0x38>)
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	4620      	mov	r0, r4
 8000618:	2200      	movs	r2, #0
 800061a:	2104      	movs	r1, #4
 800061c:	f7ff ff94 	bl	8000548 <std>
 8000620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000624:	2201      	movs	r2, #1
 8000626:	2109      	movs	r1, #9
 8000628:	f7ff ff8e 	bl	8000548 <std>
 800062c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000630:	2202      	movs	r2, #2
 8000632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000636:	2112      	movs	r1, #18
 8000638:	f7ff bf86 	b.w	8000548 <std>
 800063c:	200001d4 	.word	0x200001d4
 8000640:	2000009c 	.word	0x2000009c
 8000644:	080005b5 	.word	0x080005b5

08000648 <__sfp_lock_acquire>:
 8000648:	4801      	ldr	r0, [pc, #4]	@ (8000650 <__sfp_lock_acquire+0x8>)
 800064a:	f000 b9ee 	b.w	8000a2a <__retarget_lock_acquire_recursive>
 800064e:	bf00      	nop
 8000650:	200001dd 	.word	0x200001dd

08000654 <__sfp_lock_release>:
 8000654:	4801      	ldr	r0, [pc, #4]	@ (800065c <__sfp_lock_release+0x8>)
 8000656:	f000 b9e9 	b.w	8000a2c <__retarget_lock_release_recursive>
 800065a:	bf00      	nop
 800065c:	200001dd 	.word	0x200001dd

08000660 <__sinit>:
 8000660:	b510      	push	{r4, lr}
 8000662:	4604      	mov	r4, r0
 8000664:	f7ff fff0 	bl	8000648 <__sfp_lock_acquire>
 8000668:	6a23      	ldr	r3, [r4, #32]
 800066a:	b11b      	cbz	r3, 8000674 <__sinit+0x14>
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	f7ff bff0 	b.w	8000654 <__sfp_lock_release>
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <__sinit+0x28>)
 8000676:	6223      	str	r3, [r4, #32]
 8000678:	4b04      	ldr	r3, [pc, #16]	@ (800068c <__sinit+0x2c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f5      	bne.n	800066c <__sinit+0xc>
 8000680:	f7ff ffc4 	bl	800060c <global_stdio_init.part.0>
 8000684:	e7f2      	b.n	800066c <__sinit+0xc>
 8000686:	bf00      	nop
 8000688:	080005cd 	.word	0x080005cd
 800068c:	200001d4 	.word	0x200001d4

08000690 <_fwalk_sglue>:
 8000690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000694:	4607      	mov	r7, r0
 8000696:	4688      	mov	r8, r1
 8000698:	4614      	mov	r4, r2
 800069a:	2600      	movs	r6, #0
 800069c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006a0:	f1b9 0901 	subs.w	r9, r9, #1
 80006a4:	d505      	bpl.n	80006b2 <_fwalk_sglue+0x22>
 80006a6:	6824      	ldr	r4, [r4, #0]
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d1f7      	bne.n	800069c <_fwalk_sglue+0xc>
 80006ac:	4630      	mov	r0, r6
 80006ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006b2:	89ab      	ldrh	r3, [r5, #12]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d907      	bls.n	80006c8 <_fwalk_sglue+0x38>
 80006b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006bc:	3301      	adds	r3, #1
 80006be:	d003      	beq.n	80006c8 <_fwalk_sglue+0x38>
 80006c0:	4629      	mov	r1, r5
 80006c2:	4638      	mov	r0, r7
 80006c4:	47c0      	blx	r8
 80006c6:	4306      	orrs	r6, r0
 80006c8:	3568      	adds	r5, #104	@ 0x68
 80006ca:	e7e9      	b.n	80006a0 <_fwalk_sglue+0x10>

080006cc <_puts_r>:
 80006cc:	6a03      	ldr	r3, [r0, #32]
 80006ce:	b570      	push	{r4, r5, r6, lr}
 80006d0:	6884      	ldr	r4, [r0, #8]
 80006d2:	4605      	mov	r5, r0
 80006d4:	460e      	mov	r6, r1
 80006d6:	b90b      	cbnz	r3, 80006dc <_puts_r+0x10>
 80006d8:	f7ff ffc2 	bl	8000660 <__sinit>
 80006dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006de:	07db      	lsls	r3, r3, #31
 80006e0:	d405      	bmi.n	80006ee <_puts_r+0x22>
 80006e2:	89a3      	ldrh	r3, [r4, #12]
 80006e4:	0598      	lsls	r0, r3, #22
 80006e6:	d402      	bmi.n	80006ee <_puts_r+0x22>
 80006e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006ea:	f000 f99e 	bl	8000a2a <__retarget_lock_acquire_recursive>
 80006ee:	89a3      	ldrh	r3, [r4, #12]
 80006f0:	0719      	lsls	r1, r3, #28
 80006f2:	d502      	bpl.n	80006fa <_puts_r+0x2e>
 80006f4:	6923      	ldr	r3, [r4, #16]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d135      	bne.n	8000766 <_puts_r+0x9a>
 80006fa:	4621      	mov	r1, r4
 80006fc:	4628      	mov	r0, r5
 80006fe:	f000 f8c5 	bl	800088c <__swsetup_r>
 8000702:	b380      	cbz	r0, 8000766 <_puts_r+0x9a>
 8000704:	f04f 35ff 	mov.w	r5, #4294967295
 8000708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800070a:	07da      	lsls	r2, r3, #31
 800070c:	d405      	bmi.n	800071a <_puts_r+0x4e>
 800070e:	89a3      	ldrh	r3, [r4, #12]
 8000710:	059b      	lsls	r3, r3, #22
 8000712:	d402      	bmi.n	800071a <_puts_r+0x4e>
 8000714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000716:	f000 f989 	bl	8000a2c <__retarget_lock_release_recursive>
 800071a:	4628      	mov	r0, r5
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	2b00      	cmp	r3, #0
 8000720:	da04      	bge.n	800072c <_puts_r+0x60>
 8000722:	69a2      	ldr	r2, [r4, #24]
 8000724:	429a      	cmp	r2, r3
 8000726:	dc17      	bgt.n	8000758 <_puts_r+0x8c>
 8000728:	290a      	cmp	r1, #10
 800072a:	d015      	beq.n	8000758 <_puts_r+0x8c>
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	6022      	str	r2, [r4, #0]
 8000732:	7019      	strb	r1, [r3, #0]
 8000734:	68a3      	ldr	r3, [r4, #8]
 8000736:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800073a:	3b01      	subs	r3, #1
 800073c:	60a3      	str	r3, [r4, #8]
 800073e:	2900      	cmp	r1, #0
 8000740:	d1ed      	bne.n	800071e <_puts_r+0x52>
 8000742:	2b00      	cmp	r3, #0
 8000744:	da11      	bge.n	800076a <_puts_r+0x9e>
 8000746:	4622      	mov	r2, r4
 8000748:	210a      	movs	r1, #10
 800074a:	4628      	mov	r0, r5
 800074c:	f000 f85f 	bl	800080e <__swbuf_r>
 8000750:	3001      	adds	r0, #1
 8000752:	d0d7      	beq.n	8000704 <_puts_r+0x38>
 8000754:	250a      	movs	r5, #10
 8000756:	e7d7      	b.n	8000708 <_puts_r+0x3c>
 8000758:	4622      	mov	r2, r4
 800075a:	4628      	mov	r0, r5
 800075c:	f000 f857 	bl	800080e <__swbuf_r>
 8000760:	3001      	adds	r0, #1
 8000762:	d1e7      	bne.n	8000734 <_puts_r+0x68>
 8000764:	e7ce      	b.n	8000704 <_puts_r+0x38>
 8000766:	3e01      	subs	r6, #1
 8000768:	e7e4      	b.n	8000734 <_puts_r+0x68>
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	6022      	str	r2, [r4, #0]
 8000770:	220a      	movs	r2, #10
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e7ee      	b.n	8000754 <_puts_r+0x88>
	...

08000778 <puts>:
 8000778:	4b02      	ldr	r3, [pc, #8]	@ (8000784 <puts+0xc>)
 800077a:	4601      	mov	r1, r0
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	f7ff bfa5 	b.w	80006cc <_puts_r>
 8000782:	bf00      	nop
 8000784:	2000001c 	.word	0x2000001c

08000788 <__sread>:
 8000788:	b510      	push	{r4, lr}
 800078a:	460c      	mov	r4, r1
 800078c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000790:	f000 f8fc 	bl	800098c <_read_r>
 8000794:	2800      	cmp	r0, #0
 8000796:	bfab      	itete	ge
 8000798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800079a:	89a3      	ldrhlt	r3, [r4, #12]
 800079c:	181b      	addge	r3, r3, r0
 800079e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007a2:	bfac      	ite	ge
 80007a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007a6:	81a3      	strhlt	r3, [r4, #12]
 80007a8:	bd10      	pop	{r4, pc}

080007aa <__swrite>:
 80007aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ae:	461f      	mov	r7, r3
 80007b0:	898b      	ldrh	r3, [r1, #12]
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	4605      	mov	r5, r0
 80007b6:	460c      	mov	r4, r1
 80007b8:	4616      	mov	r6, r2
 80007ba:	d505      	bpl.n	80007c8 <__swrite+0x1e>
 80007bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c0:	2302      	movs	r3, #2
 80007c2:	2200      	movs	r2, #0
 80007c4:	f000 f8d0 	bl	8000968 <_lseek_r>
 80007c8:	89a3      	ldrh	r3, [r4, #12]
 80007ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d2:	81a3      	strh	r3, [r4, #12]
 80007d4:	4632      	mov	r2, r6
 80007d6:	463b      	mov	r3, r7
 80007d8:	4628      	mov	r0, r5
 80007da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007de:	f000 b8e7 	b.w	80009b0 <_write_r>

080007e2 <__sseek>:
 80007e2:	b510      	push	{r4, lr}
 80007e4:	460c      	mov	r4, r1
 80007e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ea:	f000 f8bd 	bl	8000968 <_lseek_r>
 80007ee:	1c43      	adds	r3, r0, #1
 80007f0:	89a3      	ldrh	r3, [r4, #12]
 80007f2:	bf15      	itete	ne
 80007f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007fe:	81a3      	strheq	r3, [r4, #12]
 8000800:	bf18      	it	ne
 8000802:	81a3      	strhne	r3, [r4, #12]
 8000804:	bd10      	pop	{r4, pc}

08000806 <__sclose>:
 8000806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800080a:	f000 b89d 	b.w	8000948 <_close_r>

0800080e <__swbuf_r>:
 800080e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000810:	460e      	mov	r6, r1
 8000812:	4614      	mov	r4, r2
 8000814:	4605      	mov	r5, r0
 8000816:	b118      	cbz	r0, 8000820 <__swbuf_r+0x12>
 8000818:	6a03      	ldr	r3, [r0, #32]
 800081a:	b90b      	cbnz	r3, 8000820 <__swbuf_r+0x12>
 800081c:	f7ff ff20 	bl	8000660 <__sinit>
 8000820:	69a3      	ldr	r3, [r4, #24]
 8000822:	60a3      	str	r3, [r4, #8]
 8000824:	89a3      	ldrh	r3, [r4, #12]
 8000826:	071a      	lsls	r2, r3, #28
 8000828:	d501      	bpl.n	800082e <__swbuf_r+0x20>
 800082a:	6923      	ldr	r3, [r4, #16]
 800082c:	b943      	cbnz	r3, 8000840 <__swbuf_r+0x32>
 800082e:	4621      	mov	r1, r4
 8000830:	4628      	mov	r0, r5
 8000832:	f000 f82b 	bl	800088c <__swsetup_r>
 8000836:	b118      	cbz	r0, 8000840 <__swbuf_r+0x32>
 8000838:	f04f 37ff 	mov.w	r7, #4294967295
 800083c:	4638      	mov	r0, r7
 800083e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	6922      	ldr	r2, [r4, #16]
 8000844:	1a98      	subs	r0, r3, r2
 8000846:	6963      	ldr	r3, [r4, #20]
 8000848:	b2f6      	uxtb	r6, r6
 800084a:	4283      	cmp	r3, r0
 800084c:	4637      	mov	r7, r6
 800084e:	dc05      	bgt.n	800085c <__swbuf_r+0x4e>
 8000850:	4621      	mov	r1, r4
 8000852:	4628      	mov	r0, r5
 8000854:	f000 fa64 	bl	8000d20 <_fflush_r>
 8000858:	2800      	cmp	r0, #0
 800085a:	d1ed      	bne.n	8000838 <__swbuf_r+0x2a>
 800085c:	68a3      	ldr	r3, [r4, #8]
 800085e:	3b01      	subs	r3, #1
 8000860:	60a3      	str	r3, [r4, #8]
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	6022      	str	r2, [r4, #0]
 8000868:	701e      	strb	r6, [r3, #0]
 800086a:	6962      	ldr	r2, [r4, #20]
 800086c:	1c43      	adds	r3, r0, #1
 800086e:	429a      	cmp	r2, r3
 8000870:	d004      	beq.n	800087c <__swbuf_r+0x6e>
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	07db      	lsls	r3, r3, #31
 8000876:	d5e1      	bpl.n	800083c <__swbuf_r+0x2e>
 8000878:	2e0a      	cmp	r6, #10
 800087a:	d1df      	bne.n	800083c <__swbuf_r+0x2e>
 800087c:	4621      	mov	r1, r4
 800087e:	4628      	mov	r0, r5
 8000880:	f000 fa4e 	bl	8000d20 <_fflush_r>
 8000884:	2800      	cmp	r0, #0
 8000886:	d0d9      	beq.n	800083c <__swbuf_r+0x2e>
 8000888:	e7d6      	b.n	8000838 <__swbuf_r+0x2a>
	...

0800088c <__swsetup_r>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <__swsetup_r+0xa8>)
 8000890:	4605      	mov	r5, r0
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	460c      	mov	r4, r1
 8000896:	b118      	cbz	r0, 80008a0 <__swsetup_r+0x14>
 8000898:	6a03      	ldr	r3, [r0, #32]
 800089a:	b90b      	cbnz	r3, 80008a0 <__swsetup_r+0x14>
 800089c:	f7ff fee0 	bl	8000660 <__sinit>
 80008a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008a4:	0719      	lsls	r1, r3, #28
 80008a6:	d422      	bmi.n	80008ee <__swsetup_r+0x62>
 80008a8:	06da      	lsls	r2, r3, #27
 80008aa:	d407      	bmi.n	80008bc <__swsetup_r+0x30>
 80008ac:	2209      	movs	r2, #9
 80008ae:	602a      	str	r2, [r5, #0]
 80008b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b4:	81a3      	strh	r3, [r4, #12]
 80008b6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ba:	e033      	b.n	8000924 <__swsetup_r+0x98>
 80008bc:	0758      	lsls	r0, r3, #29
 80008be:	d512      	bpl.n	80008e6 <__swsetup_r+0x5a>
 80008c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80008c2:	b141      	cbz	r1, 80008d6 <__swsetup_r+0x4a>
 80008c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008c8:	4299      	cmp	r1, r3
 80008ca:	d002      	beq.n	80008d2 <__swsetup_r+0x46>
 80008cc:	4628      	mov	r0, r5
 80008ce:	f000 f8af 	bl	8000a30 <_free_r>
 80008d2:	2300      	movs	r3, #0
 80008d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80008d6:	89a3      	ldrh	r3, [r4, #12]
 80008d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008dc:	81a3      	strh	r3, [r4, #12]
 80008de:	2300      	movs	r3, #0
 80008e0:	6063      	str	r3, [r4, #4]
 80008e2:	6923      	ldr	r3, [r4, #16]
 80008e4:	6023      	str	r3, [r4, #0]
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	81a3      	strh	r3, [r4, #12]
 80008ee:	6923      	ldr	r3, [r4, #16]
 80008f0:	b94b      	cbnz	r3, 8000906 <__swsetup_r+0x7a>
 80008f2:	89a3      	ldrh	r3, [r4, #12]
 80008f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008fc:	d003      	beq.n	8000906 <__swsetup_r+0x7a>
 80008fe:	4621      	mov	r1, r4
 8000900:	4628      	mov	r0, r5
 8000902:	f000 fa5b 	bl	8000dbc <__smakebuf_r>
 8000906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800090a:	f013 0201 	ands.w	r2, r3, #1
 800090e:	d00a      	beq.n	8000926 <__swsetup_r+0x9a>
 8000910:	2200      	movs	r2, #0
 8000912:	60a2      	str	r2, [r4, #8]
 8000914:	6962      	ldr	r2, [r4, #20]
 8000916:	4252      	negs	r2, r2
 8000918:	61a2      	str	r2, [r4, #24]
 800091a:	6922      	ldr	r2, [r4, #16]
 800091c:	b942      	cbnz	r2, 8000930 <__swsetup_r+0xa4>
 800091e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000922:	d1c5      	bne.n	80008b0 <__swsetup_r+0x24>
 8000924:	bd38      	pop	{r3, r4, r5, pc}
 8000926:	0799      	lsls	r1, r3, #30
 8000928:	bf58      	it	pl
 800092a:	6962      	ldrpl	r2, [r4, #20]
 800092c:	60a2      	str	r2, [r4, #8]
 800092e:	e7f4      	b.n	800091a <__swsetup_r+0x8e>
 8000930:	2000      	movs	r0, #0
 8000932:	e7f7      	b.n	8000924 <__swsetup_r+0x98>
 8000934:	2000001c 	.word	0x2000001c

08000938 <memset>:
 8000938:	4402      	add	r2, r0
 800093a:	4603      	mov	r3, r0
 800093c:	4293      	cmp	r3, r2
 800093e:	d100      	bne.n	8000942 <memset+0xa>
 8000940:	4770      	bx	lr
 8000942:	f803 1b01 	strb.w	r1, [r3], #1
 8000946:	e7f9      	b.n	800093c <memset+0x4>

08000948 <_close_r>:
 8000948:	b538      	push	{r3, r4, r5, lr}
 800094a:	4d06      	ldr	r5, [pc, #24]	@ (8000964 <_close_r+0x1c>)
 800094c:	2300      	movs	r3, #0
 800094e:	4604      	mov	r4, r0
 8000950:	4608      	mov	r0, r1
 8000952:	602b      	str	r3, [r5, #0]
 8000954:	f7ff fd67 	bl	8000426 <_close>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_close_r+0x1a>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_close_r+0x1a>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001d8 	.word	0x200001d8

08000968 <_lseek_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4d07      	ldr	r5, [pc, #28]	@ (8000988 <_lseek_r+0x20>)
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	2200      	movs	r2, #0
 8000974:	602a      	str	r2, [r5, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	f7ff fd79 	bl	800046e <_lseek>
 800097c:	1c43      	adds	r3, r0, #1
 800097e:	d102      	bne.n	8000986 <_lseek_r+0x1e>
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	b103      	cbz	r3, 8000986 <_lseek_r+0x1e>
 8000984:	6023      	str	r3, [r4, #0]
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	200001d8 	.word	0x200001d8

0800098c <_read_r>:
 800098c:	b538      	push	{r3, r4, r5, lr}
 800098e:	4d07      	ldr	r5, [pc, #28]	@ (80009ac <_read_r+0x20>)
 8000990:	4604      	mov	r4, r0
 8000992:	4608      	mov	r0, r1
 8000994:	4611      	mov	r1, r2
 8000996:	2200      	movs	r2, #0
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	f7ff fd0a 	bl	80003b4 <_read>
 80009a0:	1c43      	adds	r3, r0, #1
 80009a2:	d102      	bne.n	80009aa <_read_r+0x1e>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	b103      	cbz	r3, 80009aa <_read_r+0x1e>
 80009a8:	6023      	str	r3, [r4, #0]
 80009aa:	bd38      	pop	{r3, r4, r5, pc}
 80009ac:	200001d8 	.word	0x200001d8

080009b0 <_write_r>:
 80009b0:	b538      	push	{r3, r4, r5, lr}
 80009b2:	4d07      	ldr	r5, [pc, #28]	@ (80009d0 <_write_r+0x20>)
 80009b4:	4604      	mov	r4, r0
 80009b6:	4608      	mov	r0, r1
 80009b8:	4611      	mov	r1, r2
 80009ba:	2200      	movs	r2, #0
 80009bc:	602a      	str	r2, [r5, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	f7ff fd15 	bl	80003ee <_write>
 80009c4:	1c43      	adds	r3, r0, #1
 80009c6:	d102      	bne.n	80009ce <_write_r+0x1e>
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	b103      	cbz	r3, 80009ce <_write_r+0x1e>
 80009cc:	6023      	str	r3, [r4, #0]
 80009ce:	bd38      	pop	{r3, r4, r5, pc}
 80009d0:	200001d8 	.word	0x200001d8

080009d4 <__errno>:
 80009d4:	4b01      	ldr	r3, [pc, #4]	@ (80009dc <__errno+0x8>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2000001c 	.word	0x2000001c

080009e0 <__libc_init_array>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000a18 <__libc_init_array+0x38>)
 80009e4:	4c0d      	ldr	r4, [pc, #52]	@ (8000a1c <__libc_init_array+0x3c>)
 80009e6:	1b64      	subs	r4, r4, r5
 80009e8:	10a4      	asrs	r4, r4, #2
 80009ea:	2600      	movs	r6, #0
 80009ec:	42a6      	cmp	r6, r4
 80009ee:	d109      	bne.n	8000a04 <__libc_init_array+0x24>
 80009f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000a20 <__libc_init_array+0x40>)
 80009f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000a24 <__libc_init_array+0x44>)
 80009f4:	f000 fa50 	bl	8000e98 <_init>
 80009f8:	1b64      	subs	r4, r4, r5
 80009fa:	10a4      	asrs	r4, r4, #2
 80009fc:	2600      	movs	r6, #0
 80009fe:	42a6      	cmp	r6, r4
 8000a00:	d105      	bne.n	8000a0e <__libc_init_array+0x2e>
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a08:	4798      	blx	r3
 8000a0a:	3601      	adds	r6, #1
 8000a0c:	e7ee      	b.n	80009ec <__libc_init_array+0xc>
 8000a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a12:	4798      	blx	r3
 8000a14:	3601      	adds	r6, #1
 8000a16:	e7f2      	b.n	80009fe <__libc_init_array+0x1e>
 8000a18:	08000f04 	.word	0x08000f04
 8000a1c:	08000f04 	.word	0x08000f04
 8000a20:	08000f04 	.word	0x08000f04
 8000a24:	08000f08 	.word	0x08000f08

08000a28 <__retarget_lock_init_recursive>:
 8000a28:	4770      	bx	lr

08000a2a <__retarget_lock_acquire_recursive>:
 8000a2a:	4770      	bx	lr

08000a2c <__retarget_lock_release_recursive>:
 8000a2c:	4770      	bx	lr
	...

08000a30 <_free_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4605      	mov	r5, r0
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d041      	beq.n	8000abc <_free_r+0x8c>
 8000a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a3c:	1f0c      	subs	r4, r1, #4
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bfb8      	it	lt
 8000a42:	18e4      	addlt	r4, r4, r3
 8000a44:	f000 f8e0 	bl	8000c08 <__malloc_lock>
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <_free_r+0x90>)
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	b933      	cbnz	r3, 8000a5c <_free_r+0x2c>
 8000a4e:	6063      	str	r3, [r4, #4]
 8000a50:	6014      	str	r4, [r2, #0]
 8000a52:	4628      	mov	r0, r5
 8000a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a58:	f000 b8dc 	b.w	8000c14 <__malloc_unlock>
 8000a5c:	42a3      	cmp	r3, r4
 8000a5e:	d908      	bls.n	8000a72 <_free_r+0x42>
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	1821      	adds	r1, r4, r0
 8000a64:	428b      	cmp	r3, r1
 8000a66:	bf01      	itttt	eq
 8000a68:	6819      	ldreq	r1, [r3, #0]
 8000a6a:	685b      	ldreq	r3, [r3, #4]
 8000a6c:	1809      	addeq	r1, r1, r0
 8000a6e:	6021      	streq	r1, [r4, #0]
 8000a70:	e7ed      	b.n	8000a4e <_free_r+0x1e>
 8000a72:	461a      	mov	r2, r3
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	b10b      	cbz	r3, 8000a7c <_free_r+0x4c>
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	d9fa      	bls.n	8000a72 <_free_r+0x42>
 8000a7c:	6811      	ldr	r1, [r2, #0]
 8000a7e:	1850      	adds	r0, r2, r1
 8000a80:	42a0      	cmp	r0, r4
 8000a82:	d10b      	bne.n	8000a9c <_free_r+0x6c>
 8000a84:	6820      	ldr	r0, [r4, #0]
 8000a86:	4401      	add	r1, r0
 8000a88:	1850      	adds	r0, r2, r1
 8000a8a:	4283      	cmp	r3, r0
 8000a8c:	6011      	str	r1, [r2, #0]
 8000a8e:	d1e0      	bne.n	8000a52 <_free_r+0x22>
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	6053      	str	r3, [r2, #4]
 8000a96:	4408      	add	r0, r1
 8000a98:	6010      	str	r0, [r2, #0]
 8000a9a:	e7da      	b.n	8000a52 <_free_r+0x22>
 8000a9c:	d902      	bls.n	8000aa4 <_free_r+0x74>
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	602b      	str	r3, [r5, #0]
 8000aa2:	e7d6      	b.n	8000a52 <_free_r+0x22>
 8000aa4:	6820      	ldr	r0, [r4, #0]
 8000aa6:	1821      	adds	r1, r4, r0
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	bf04      	itt	eq
 8000aac:	6819      	ldreq	r1, [r3, #0]
 8000aae:	685b      	ldreq	r3, [r3, #4]
 8000ab0:	6063      	str	r3, [r4, #4]
 8000ab2:	bf04      	itt	eq
 8000ab4:	1809      	addeq	r1, r1, r0
 8000ab6:	6021      	streq	r1, [r4, #0]
 8000ab8:	6054      	str	r4, [r2, #4]
 8000aba:	e7ca      	b.n	8000a52 <_free_r+0x22>
 8000abc:	bd38      	pop	{r3, r4, r5, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001e4 	.word	0x200001e4

08000ac4 <sbrk_aligned>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8000b04 <sbrk_aligned+0x40>)
 8000ac8:	460c      	mov	r4, r1
 8000aca:	6831      	ldr	r1, [r6, #0]
 8000acc:	4605      	mov	r5, r0
 8000ace:	b911      	cbnz	r1, 8000ad6 <sbrk_aligned+0x12>
 8000ad0:	f000 f9d2 	bl	8000e78 <_sbrk_r>
 8000ad4:	6030      	str	r0, [r6, #0]
 8000ad6:	4621      	mov	r1, r4
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 f9cd 	bl	8000e78 <_sbrk_r>
 8000ade:	1c43      	adds	r3, r0, #1
 8000ae0:	d103      	bne.n	8000aea <sbrk_aligned+0x26>
 8000ae2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	1cc4      	adds	r4, r0, #3
 8000aec:	f024 0403 	bic.w	r4, r4, #3
 8000af0:	42a0      	cmp	r0, r4
 8000af2:	d0f8      	beq.n	8000ae6 <sbrk_aligned+0x22>
 8000af4:	1a21      	subs	r1, r4, r0
 8000af6:	4628      	mov	r0, r5
 8000af8:	f000 f9be 	bl	8000e78 <_sbrk_r>
 8000afc:	3001      	adds	r0, #1
 8000afe:	d1f2      	bne.n	8000ae6 <sbrk_aligned+0x22>
 8000b00:	e7ef      	b.n	8000ae2 <sbrk_aligned+0x1e>
 8000b02:	bf00      	nop
 8000b04:	200001e0 	.word	0x200001e0

08000b08 <_malloc_r>:
 8000b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b0c:	1ccd      	adds	r5, r1, #3
 8000b0e:	f025 0503 	bic.w	r5, r5, #3
 8000b12:	3508      	adds	r5, #8
 8000b14:	2d0c      	cmp	r5, #12
 8000b16:	bf38      	it	cc
 8000b18:	250c      	movcc	r5, #12
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	db01      	blt.n	8000b24 <_malloc_r+0x1c>
 8000b20:	42a9      	cmp	r1, r5
 8000b22:	d904      	bls.n	8000b2e <_malloc_r+0x26>
 8000b24:	230c      	movs	r3, #12
 8000b26:	6033      	str	r3, [r6, #0]
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c04 <_malloc_r+0xfc>
 8000b32:	f000 f869 	bl	8000c08 <__malloc_lock>
 8000b36:	f8d8 3000 	ldr.w	r3, [r8]
 8000b3a:	461c      	mov	r4, r3
 8000b3c:	bb44      	cbnz	r4, 8000b90 <_malloc_r+0x88>
 8000b3e:	4629      	mov	r1, r5
 8000b40:	4630      	mov	r0, r6
 8000b42:	f7ff ffbf 	bl	8000ac4 <sbrk_aligned>
 8000b46:	1c43      	adds	r3, r0, #1
 8000b48:	4604      	mov	r4, r0
 8000b4a:	d158      	bne.n	8000bfe <_malloc_r+0xf6>
 8000b4c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b50:	4627      	mov	r7, r4
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d143      	bne.n	8000bde <_malloc_r+0xd6>
 8000b56:	2c00      	cmp	r4, #0
 8000b58:	d04b      	beq.n	8000bf2 <_malloc_r+0xea>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	4630      	mov	r0, r6
 8000b60:	eb04 0903 	add.w	r9, r4, r3
 8000b64:	f000 f988 	bl	8000e78 <_sbrk_r>
 8000b68:	4581      	cmp	r9, r0
 8000b6a:	d142      	bne.n	8000bf2 <_malloc_r+0xea>
 8000b6c:	6821      	ldr	r1, [r4, #0]
 8000b6e:	1a6d      	subs	r5, r5, r1
 8000b70:	4629      	mov	r1, r5
 8000b72:	4630      	mov	r0, r6
 8000b74:	f7ff ffa6 	bl	8000ac4 <sbrk_aligned>
 8000b78:	3001      	adds	r0, #1
 8000b7a:	d03a      	beq.n	8000bf2 <_malloc_r+0xea>
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	442b      	add	r3, r5
 8000b80:	6023      	str	r3, [r4, #0]
 8000b82:	f8d8 3000 	ldr.w	r3, [r8]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	bb62      	cbnz	r2, 8000be4 <_malloc_r+0xdc>
 8000b8a:	f8c8 7000 	str.w	r7, [r8]
 8000b8e:	e00f      	b.n	8000bb0 <_malloc_r+0xa8>
 8000b90:	6822      	ldr	r2, [r4, #0]
 8000b92:	1b52      	subs	r2, r2, r5
 8000b94:	d420      	bmi.n	8000bd8 <_malloc_r+0xd0>
 8000b96:	2a0b      	cmp	r2, #11
 8000b98:	d917      	bls.n	8000bca <_malloc_r+0xc2>
 8000b9a:	1961      	adds	r1, r4, r5
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	6025      	str	r5, [r4, #0]
 8000ba0:	bf18      	it	ne
 8000ba2:	6059      	strne	r1, [r3, #4]
 8000ba4:	6863      	ldr	r3, [r4, #4]
 8000ba6:	bf08      	it	eq
 8000ba8:	f8c8 1000 	streq.w	r1, [r8]
 8000bac:	5162      	str	r2, [r4, r5]
 8000bae:	604b      	str	r3, [r1, #4]
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f000 f82f 	bl	8000c14 <__malloc_unlock>
 8000bb6:	f104 000b 	add.w	r0, r4, #11
 8000bba:	1d23      	adds	r3, r4, #4
 8000bbc:	f020 0007 	bic.w	r0, r0, #7
 8000bc0:	1ac2      	subs	r2, r0, r3
 8000bc2:	bf1c      	itt	ne
 8000bc4:	1a1b      	subne	r3, r3, r0
 8000bc6:	50a3      	strne	r3, [r4, r2]
 8000bc8:	e7af      	b.n	8000b2a <_malloc_r+0x22>
 8000bca:	6862      	ldr	r2, [r4, #4]
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	bf0c      	ite	eq
 8000bd0:	f8c8 2000 	streq.w	r2, [r8]
 8000bd4:	605a      	strne	r2, [r3, #4]
 8000bd6:	e7eb      	b.n	8000bb0 <_malloc_r+0xa8>
 8000bd8:	4623      	mov	r3, r4
 8000bda:	6864      	ldr	r4, [r4, #4]
 8000bdc:	e7ae      	b.n	8000b3c <_malloc_r+0x34>
 8000bde:	463c      	mov	r4, r7
 8000be0:	687f      	ldr	r7, [r7, #4]
 8000be2:	e7b6      	b.n	8000b52 <_malloc_r+0x4a>
 8000be4:	461a      	mov	r2, r3
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	d1fb      	bne.n	8000be4 <_malloc_r+0xdc>
 8000bec:	2300      	movs	r3, #0
 8000bee:	6053      	str	r3, [r2, #4]
 8000bf0:	e7de      	b.n	8000bb0 <_malloc_r+0xa8>
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	6033      	str	r3, [r6, #0]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f000 f80c 	bl	8000c14 <__malloc_unlock>
 8000bfc:	e794      	b.n	8000b28 <_malloc_r+0x20>
 8000bfe:	6005      	str	r5, [r0, #0]
 8000c00:	e7d6      	b.n	8000bb0 <_malloc_r+0xa8>
 8000c02:	bf00      	nop
 8000c04:	200001e4 	.word	0x200001e4

08000c08 <__malloc_lock>:
 8000c08:	4801      	ldr	r0, [pc, #4]	@ (8000c10 <__malloc_lock+0x8>)
 8000c0a:	f7ff bf0e 	b.w	8000a2a <__retarget_lock_acquire_recursive>
 8000c0e:	bf00      	nop
 8000c10:	200001dc 	.word	0x200001dc

08000c14 <__malloc_unlock>:
 8000c14:	4801      	ldr	r0, [pc, #4]	@ (8000c1c <__malloc_unlock+0x8>)
 8000c16:	f7ff bf09 	b.w	8000a2c <__retarget_lock_release_recursive>
 8000c1a:	bf00      	nop
 8000c1c:	200001dc 	.word	0x200001dc

08000c20 <__sflush_r>:
 8000c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	0716      	lsls	r6, r2, #28
 8000c28:	4605      	mov	r5, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	d454      	bmi.n	8000cd8 <__sflush_r+0xb8>
 8000c2e:	684b      	ldr	r3, [r1, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dc02      	bgt.n	8000c3a <__sflush_r+0x1a>
 8000c34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dd48      	ble.n	8000ccc <__sflush_r+0xac>
 8000c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d045      	beq.n	8000ccc <__sflush_r+0xac>
 8000c40:	2300      	movs	r3, #0
 8000c42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c46:	682f      	ldr	r7, [r5, #0]
 8000c48:	6a21      	ldr	r1, [r4, #32]
 8000c4a:	602b      	str	r3, [r5, #0]
 8000c4c:	d030      	beq.n	8000cb0 <__sflush_r+0x90>
 8000c4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	0759      	lsls	r1, r3, #29
 8000c54:	d505      	bpl.n	8000c62 <__sflush_r+0x42>
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c5c:	b10b      	cbz	r3, 8000c62 <__sflush_r+0x42>
 8000c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c60:	1ad2      	subs	r2, r2, r3
 8000c62:	2300      	movs	r3, #0
 8000c64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c66:	6a21      	ldr	r1, [r4, #32]
 8000c68:	4628      	mov	r0, r5
 8000c6a:	47b0      	blx	r6
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	89a3      	ldrh	r3, [r4, #12]
 8000c70:	d106      	bne.n	8000c80 <__sflush_r+0x60>
 8000c72:	6829      	ldr	r1, [r5, #0]
 8000c74:	291d      	cmp	r1, #29
 8000c76:	d82b      	bhi.n	8000cd0 <__sflush_r+0xb0>
 8000c78:	4a28      	ldr	r2, [pc, #160]	@ (8000d1c <__sflush_r+0xfc>)
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	07d6      	lsls	r6, r2, #31
 8000c7e:	d527      	bpl.n	8000cd0 <__sflush_r+0xb0>
 8000c80:	2200      	movs	r2, #0
 8000c82:	6062      	str	r2, [r4, #4]
 8000c84:	04d9      	lsls	r1, r3, #19
 8000c86:	6922      	ldr	r2, [r4, #16]
 8000c88:	6022      	str	r2, [r4, #0]
 8000c8a:	d504      	bpl.n	8000c96 <__sflush_r+0x76>
 8000c8c:	1c42      	adds	r2, r0, #1
 8000c8e:	d101      	bne.n	8000c94 <__sflush_r+0x74>
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	b903      	cbnz	r3, 8000c96 <__sflush_r+0x76>
 8000c94:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c98:	602f      	str	r7, [r5, #0]
 8000c9a:	b1b9      	cbz	r1, 8000ccc <__sflush_r+0xac>
 8000c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d002      	beq.n	8000caa <__sflush_r+0x8a>
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f7ff fec3 	bl	8000a30 <_free_r>
 8000caa:	2300      	movs	r3, #0
 8000cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8000cae:	e00d      	b.n	8000ccc <__sflush_r+0xac>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	47b0      	blx	r6
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	1c50      	adds	r0, r2, #1
 8000cba:	d1c9      	bne.n	8000c50 <__sflush_r+0x30>
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0c6      	beq.n	8000c50 <__sflush_r+0x30>
 8000cc2:	2b1d      	cmp	r3, #29
 8000cc4:	d001      	beq.n	8000cca <__sflush_r+0xaa>
 8000cc6:	2b16      	cmp	r3, #22
 8000cc8:	d11d      	bne.n	8000d06 <__sflush_r+0xe6>
 8000cca:	602f      	str	r7, [r5, #0]
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e021      	b.n	8000d14 <__sflush_r+0xf4>
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	e01a      	b.n	8000d0e <__sflush_r+0xee>
 8000cd8:	690f      	ldr	r7, [r1, #16]
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d0f6      	beq.n	8000ccc <__sflush_r+0xac>
 8000cde:	0793      	lsls	r3, r2, #30
 8000ce0:	680e      	ldr	r6, [r1, #0]
 8000ce2:	bf08      	it	eq
 8000ce4:	694b      	ldreq	r3, [r1, #20]
 8000ce6:	600f      	str	r7, [r1, #0]
 8000ce8:	bf18      	it	ne
 8000cea:	2300      	movne	r3, #0
 8000cec:	1bf6      	subs	r6, r6, r7
 8000cee:	608b      	str	r3, [r1, #8]
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	ddeb      	ble.n	8000ccc <__sflush_r+0xac>
 8000cf4:	6a21      	ldr	r1, [r4, #32]
 8000cf6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000cfa:	4633      	mov	r3, r6
 8000cfc:	463a      	mov	r2, r7
 8000cfe:	4628      	mov	r0, r5
 8000d00:	47e0      	blx	ip
 8000d02:	2800      	cmp	r0, #0
 8000d04:	dc07      	bgt.n	8000d16 <__sflush_r+0xf6>
 8000d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d0e:	81a3      	strh	r3, [r4, #12]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d16:	4407      	add	r7, r0
 8000d18:	1a36      	subs	r6, r6, r0
 8000d1a:	e7e9      	b.n	8000cf0 <__sflush_r+0xd0>
 8000d1c:	20400001 	.word	0x20400001

08000d20 <_fflush_r>:
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	690b      	ldr	r3, [r1, #16]
 8000d24:	4605      	mov	r5, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	b913      	cbnz	r3, 8000d30 <_fflush_r+0x10>
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	bd38      	pop	{r3, r4, r5, pc}
 8000d30:	b118      	cbz	r0, 8000d3a <_fflush_r+0x1a>
 8000d32:	6a03      	ldr	r3, [r0, #32]
 8000d34:	b90b      	cbnz	r3, 8000d3a <_fflush_r+0x1a>
 8000d36:	f7ff fc93 	bl	8000660 <__sinit>
 8000d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f3      	beq.n	8000d2a <_fflush_r+0xa>
 8000d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d44:	07d0      	lsls	r0, r2, #31
 8000d46:	d404      	bmi.n	8000d52 <_fflush_r+0x32>
 8000d48:	0599      	lsls	r1, r3, #22
 8000d4a:	d402      	bmi.n	8000d52 <_fflush_r+0x32>
 8000d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d4e:	f7ff fe6c 	bl	8000a2a <__retarget_lock_acquire_recursive>
 8000d52:	4628      	mov	r0, r5
 8000d54:	4621      	mov	r1, r4
 8000d56:	f7ff ff63 	bl	8000c20 <__sflush_r>
 8000d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d5c:	07da      	lsls	r2, r3, #31
 8000d5e:	4605      	mov	r5, r0
 8000d60:	d4e4      	bmi.n	8000d2c <_fflush_r+0xc>
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	059b      	lsls	r3, r3, #22
 8000d66:	d4e1      	bmi.n	8000d2c <_fflush_r+0xc>
 8000d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d6a:	f7ff fe5f 	bl	8000a2c <__retarget_lock_release_recursive>
 8000d6e:	e7dd      	b.n	8000d2c <_fflush_r+0xc>

08000d70 <__swhatbuf_r>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	460c      	mov	r4, r1
 8000d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	b096      	sub	sp, #88	@ 0x58
 8000d7c:	4615      	mov	r5, r2
 8000d7e:	461e      	mov	r6, r3
 8000d80:	da0d      	bge.n	8000d9e <__swhatbuf_r+0x2e>
 8000d82:	89a3      	ldrh	r3, [r4, #12]
 8000d84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d88:	f04f 0100 	mov.w	r1, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2340      	movne	r3, #64	@ 0x40
 8000d90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d94:	2000      	movs	r0, #0
 8000d96:	6031      	str	r1, [r6, #0]
 8000d98:	602b      	str	r3, [r5, #0]
 8000d9a:	b016      	add	sp, #88	@ 0x58
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
 8000d9e:	466a      	mov	r2, sp
 8000da0:	f000 f848 	bl	8000e34 <_fstat_r>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	dbec      	blt.n	8000d82 <__swhatbuf_r+0x12>
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000dae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000db2:	4259      	negs	r1, r3
 8000db4:	4159      	adcs	r1, r3
 8000db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dba:	e7eb      	b.n	8000d94 <__swhatbuf_r+0x24>

08000dbc <__smakebuf_r>:
 8000dbc:	898b      	ldrh	r3, [r1, #12]
 8000dbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dc0:	079d      	lsls	r5, r3, #30
 8000dc2:	4606      	mov	r6, r0
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	d507      	bpl.n	8000dd8 <__smakebuf_r+0x1c>
 8000dc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	6123      	str	r3, [r4, #16]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	6163      	str	r3, [r4, #20]
 8000dd4:	b003      	add	sp, #12
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd8:	ab01      	add	r3, sp, #4
 8000dda:	466a      	mov	r2, sp
 8000ddc:	f7ff ffc8 	bl	8000d70 <__swhatbuf_r>
 8000de0:	9f00      	ldr	r7, [sp, #0]
 8000de2:	4605      	mov	r5, r0
 8000de4:	4639      	mov	r1, r7
 8000de6:	4630      	mov	r0, r6
 8000de8:	f7ff fe8e 	bl	8000b08 <_malloc_r>
 8000dec:	b948      	cbnz	r0, 8000e02 <__smakebuf_r+0x46>
 8000dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000df2:	059a      	lsls	r2, r3, #22
 8000df4:	d4ee      	bmi.n	8000dd4 <__smakebuf_r+0x18>
 8000df6:	f023 0303 	bic.w	r3, r3, #3
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	81a3      	strh	r3, [r4, #12]
 8000e00:	e7e2      	b.n	8000dc8 <__smakebuf_r+0xc>
 8000e02:	89a3      	ldrh	r3, [r4, #12]
 8000e04:	6020      	str	r0, [r4, #0]
 8000e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e12:	b15b      	cbz	r3, 8000e2c <__smakebuf_r+0x70>
 8000e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f000 f81d 	bl	8000e58 <_isatty_r>
 8000e1e:	b128      	cbz	r0, 8000e2c <__smakebuf_r+0x70>
 8000e20:	89a3      	ldrh	r3, [r4, #12]
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	81a3      	strh	r3, [r4, #12]
 8000e2c:	89a3      	ldrh	r3, [r4, #12]
 8000e2e:	431d      	orrs	r5, r3
 8000e30:	81a5      	strh	r5, [r4, #12]
 8000e32:	e7cf      	b.n	8000dd4 <__smakebuf_r+0x18>

08000e34 <_fstat_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4d07      	ldr	r5, [pc, #28]	@ (8000e54 <_fstat_r+0x20>)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	602b      	str	r3, [r5, #0]
 8000e42:	f7ff fafb 	bl	800043c <_fstat>
 8000e46:	1c43      	adds	r3, r0, #1
 8000e48:	d102      	bne.n	8000e50 <_fstat_r+0x1c>
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	b103      	cbz	r3, 8000e50 <_fstat_r+0x1c>
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	bd38      	pop	{r3, r4, r5, pc}
 8000e52:	bf00      	nop
 8000e54:	200001d8 	.word	0x200001d8

08000e58 <_isatty_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d06      	ldr	r5, [pc, #24]	@ (8000e74 <_isatty_r+0x1c>)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	602b      	str	r3, [r5, #0]
 8000e64:	f7ff faf9 	bl	800045a <_isatty>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	d102      	bne.n	8000e72 <_isatty_r+0x1a>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <_isatty_r+0x1a>
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	200001d8 	.word	0x200001d8

08000e78 <_sbrk_r>:
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	4d06      	ldr	r5, [pc, #24]	@ (8000e94 <_sbrk_r+0x1c>)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	602b      	str	r3, [r5, #0]
 8000e84:	f7ff fb00 	bl	8000488 <_sbrk>
 8000e88:	1c43      	adds	r3, r0, #1
 8000e8a:	d102      	bne.n	8000e92 <_sbrk_r+0x1a>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	b103      	cbz	r3, 8000e92 <_sbrk_r+0x1a>
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	200001d8 	.word	0x200001d8

08000e98 <_init>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_fini>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr
