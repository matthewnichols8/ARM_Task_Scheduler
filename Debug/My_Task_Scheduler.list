
My_Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c3c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08000dc4  08000dc4  00001dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e18  08000e18  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e18  08000e18  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e18  08000e18  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e18  08000e18  00001e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e1c  08000e1c  00001e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e20  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a11  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000385  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00002e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ee  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d8d  00000000  00000000  00003066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001538  00000000  00000000  00005df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b83  00000000  00000000  0000732b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010eae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ab4  00000000  00000000  00010ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000119a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000dac 	.word	0x08000dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000dac 	.word	0x08000dac

080001c8 <main>:
 * Global Variables
 */
uint32_t psp_of_tasks[MAX_TASKS];

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	init_scheduler_stack(SCHED_STACK_START);
 80001cc:	4805      	ldr	r0, [pc, #20]	@ (80001e4 <main+0x1c>)
 80001ce:	f000 f83f 	bl	8000250 <init_scheduler_stack>

	init_tasks_stack();
 80001d2:	f000 f842 	bl	800025a <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 80001d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001da:	f000 f805 	bl	80001e8 <init_systick_timer>

    /* Loop forever */
	for(;;);
 80001de:	bf00      	nop
 80001e0:	e7fd      	b.n	80001de <main+0x16>
 80001e2:	bf00      	nop
 80001e4:	2001f000 	.word	0x2001f000

080001e8 <init_systick_timer>:
	while(1) {
		printf("This is task 4\n");
	}
}

void init_systick_timer(uint32_t tick_hz) {
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t* pSRVR = (uint32_t*)  0xE000E014; //SysTick Reload Value Register
 80001f0:	4b14      	ldr	r3, [pc, #80]	@ (8000244 <init_systick_timer+0x5c>)
 80001f2:	617b      	str	r3, [r7, #20]
	uint32_t* pSCSR = (uint32_t*)  0xE000E010; //SysTick Control and Status Register
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <init_systick_timer+0x60>)
 80001f6:	613b      	str	r3, [r7, #16]
	uint32_t countVal = (SYSTICK_TIM_CLK / tick_hz) - 1; //Reload Value should be N-1 (Number of clock cycles - 1).
 80001f8:	4a14      	ldr	r2, [pc, #80]	@ (800024c <init_systick_timer+0x64>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000200:	3b01      	subs	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]

	//Clear value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]

	//load value into SVR
	*pSRVR |= countVal;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	431a      	orrs	r2, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	601a      	str	r2, [r3, #0]

	//Edit Settings
	*pSCSR |= (1 << 1); //Enables SysTick Exception Request
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0202 	orr.w	r2, r3, #2
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Indicates that the clock source is the processor internal clock
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0204 	orr.w	r2, r3, #4
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]

	//Enable systick
	*pSCSR |= (1 << 0); //Enables the SysTick counter
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e014 	.word	0xe000e014
 8000248:	e000e010 	.word	0xe000e010
 800024c:	00f42400 	.word	0x00f42400

08000250 <init_scheduler_stack>:

/*
 * Must be a naked function to access MSP which is a special register
 */
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack) {
 8000250:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : ); //Puts value of the top of the stack into MSP
 8000252:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR"); //Return from function call
 8000256:	4770      	bx	lr
}
 8000258:	bf00      	nop

0800025a <init_tasks_stack>:


void init_tasks_stack() {
 800025a:	b480      	push	{r7}
 800025c:	af00      	add	r7, sp, #0

}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
	...

08000268 <SysTick_Handler>:

void SysTick_Handler() {
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	printf("In SysTick Handler\n");
 800026c:	4802      	ldr	r0, [pc, #8]	@ (8000278 <SysTick_Handler+0x10>)
 800026e:	f000 fa0d 	bl	800068c <puts>
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	08000e04 	.word	0x08000e04

0800027c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000286:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <ITM_SendChar+0x44>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <ITM_SendChar+0x44>)
 800028c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000290:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <ITM_SendChar+0x48>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <ITM_SendChar+0x48>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800029e:	bf00      	nop
 80002a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f8      	beq.n	80002a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002ae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	6013      	str	r3, [r2, #0]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	e000edfc 	.word	0xe000edfc
 80002c4:	e0000e00 	.word	0xe0000e00

080002c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002da:	f3af 8000 	nop.w
 80002de:	4601      	mov	r1, r0
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	b2ca      	uxtb	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <_read+0x12>
  }

  return len;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e009      	b.n	8000328 <_write+0x26>
  {
      // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffad 	bl	800027c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf1      	blt.n	8000314 <_write+0x12>
  }
  return len;
 8000330:	687b      	ldr	r3, [r7, #4]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_close>:

int _close(int file)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000360:	605a      	str	r2, [r3, #4]
  return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <_isatty>:

int _isatty(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	60f8      	str	r0, [r7, #12]
 800038a:	60b9      	str	r1, [r7, #8]
 800038c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
	...

0800039c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003a4:	4a14      	ldr	r2, [pc, #80]	@ (80003f8 <_sbrk+0x5c>)
 80003a6:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <_sbrk+0x60>)
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003b0:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <_sbrk+0x64>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	@ (8000404 <_sbrk+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <_sbrk+0x64>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d207      	bcs.n	80003dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003cc:	f000 fa8c 	bl	80008e8 <__errno>
 80003d0:	4603      	mov	r3, r0
 80003d2:	220c      	movs	r2, #12
 80003d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
 80003da:	e009      	b.n	80003f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <_sbrk+0x64>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <_sbrk+0x64>)
 80003ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ee:	68fb      	ldr	r3, [r7, #12]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20020000 	.word	0x20020000
 80003fc:	00000400 	.word	0x00000400
 8000400:	20000078 	.word	0x20000078
 8000404:	200001c8 	.word	0x200001c8

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	@ (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	@ (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	@ (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	@ (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 fa5d 	bl	80008f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff fec5 	bl	80001c8 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800044c:	08000e20 	.word	0x08000e20
  ldr r2, =_sbss
 8000450:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000454:	200001c8 	.word	0x200001c8

08000458 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <std>:
 800045c:	2300      	movs	r3, #0
 800045e:	b510      	push	{r4, lr}
 8000460:	4604      	mov	r4, r0
 8000462:	e9c0 3300 	strd	r3, r3, [r0]
 8000466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800046a:	6083      	str	r3, [r0, #8]
 800046c:	8181      	strh	r1, [r0, #12]
 800046e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000470:	81c2      	strh	r2, [r0, #14]
 8000472:	6183      	str	r3, [r0, #24]
 8000474:	4619      	mov	r1, r3
 8000476:	2208      	movs	r2, #8
 8000478:	305c      	adds	r0, #92	@ 0x5c
 800047a:	f000 f9e7 	bl	800084c <memset>
 800047e:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <std+0x58>)
 8000480:	6263      	str	r3, [r4, #36]	@ 0x24
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <std+0x5c>)
 8000484:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <std+0x60>)
 8000488:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800048a:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <std+0x64>)
 800048c:	6323      	str	r3, [r4, #48]	@ 0x30
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <std+0x68>)
 8000490:	6224      	str	r4, [r4, #32]
 8000492:	429c      	cmp	r4, r3
 8000494:	d006      	beq.n	80004a4 <std+0x48>
 8000496:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800049a:	4294      	cmp	r4, r2
 800049c:	d002      	beq.n	80004a4 <std+0x48>
 800049e:	33d0      	adds	r3, #208	@ 0xd0
 80004a0:	429c      	cmp	r4, r3
 80004a2:	d105      	bne.n	80004b0 <std+0x54>
 80004a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004ac:	f000 ba46 	b.w	800093c <__retarget_lock_init_recursive>
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	bf00      	nop
 80004b4:	0800069d 	.word	0x0800069d
 80004b8:	080006bf 	.word	0x080006bf
 80004bc:	080006f7 	.word	0x080006f7
 80004c0:	0800071b 	.word	0x0800071b
 80004c4:	2000007c 	.word	0x2000007c

080004c8 <stdio_exit_handler>:
 80004c8:	4a02      	ldr	r2, [pc, #8]	@ (80004d4 <stdio_exit_handler+0xc>)
 80004ca:	4903      	ldr	r1, [pc, #12]	@ (80004d8 <stdio_exit_handler+0x10>)
 80004cc:	4803      	ldr	r0, [pc, #12]	@ (80004dc <stdio_exit_handler+0x14>)
 80004ce:	f000 b869 	b.w	80005a4 <_fwalk_sglue>
 80004d2:	bf00      	nop
 80004d4:	20000000 	.word	0x20000000
 80004d8:	08000c35 	.word	0x08000c35
 80004dc:	20000010 	.word	0x20000010

080004e0 <cleanup_stdio>:
 80004e0:	6841      	ldr	r1, [r0, #4]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <cleanup_stdio+0x34>)
 80004e4:	4299      	cmp	r1, r3
 80004e6:	b510      	push	{r4, lr}
 80004e8:	4604      	mov	r4, r0
 80004ea:	d001      	beq.n	80004f0 <cleanup_stdio+0x10>
 80004ec:	f000 fba2 	bl	8000c34 <_fflush_r>
 80004f0:	68a1      	ldr	r1, [r4, #8]
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <cleanup_stdio+0x38>)
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d002      	beq.n	80004fe <cleanup_stdio+0x1e>
 80004f8:	4620      	mov	r0, r4
 80004fa:	f000 fb9b 	bl	8000c34 <_fflush_r>
 80004fe:	68e1      	ldr	r1, [r4, #12]
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <cleanup_stdio+0x3c>)
 8000502:	4299      	cmp	r1, r3
 8000504:	d004      	beq.n	8000510 <cleanup_stdio+0x30>
 8000506:	4620      	mov	r0, r4
 8000508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800050c:	f000 bb92 	b.w	8000c34 <_fflush_r>
 8000510:	bd10      	pop	{r4, pc}
 8000512:	bf00      	nop
 8000514:	2000007c 	.word	0x2000007c
 8000518:	200000e4 	.word	0x200000e4
 800051c:	2000014c 	.word	0x2000014c

08000520 <global_stdio_init.part.0>:
 8000520:	b510      	push	{r4, lr}
 8000522:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <global_stdio_init.part.0+0x30>)
 8000524:	4c0b      	ldr	r4, [pc, #44]	@ (8000554 <global_stdio_init.part.0+0x34>)
 8000526:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <global_stdio_init.part.0+0x38>)
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	4620      	mov	r0, r4
 800052c:	2200      	movs	r2, #0
 800052e:	2104      	movs	r1, #4
 8000530:	f7ff ff94 	bl	800045c <std>
 8000534:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000538:	2201      	movs	r2, #1
 800053a:	2109      	movs	r1, #9
 800053c:	f7ff ff8e 	bl	800045c <std>
 8000540:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000544:	2202      	movs	r2, #2
 8000546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800054a:	2112      	movs	r1, #18
 800054c:	f7ff bf86 	b.w	800045c <std>
 8000550:	200001b4 	.word	0x200001b4
 8000554:	2000007c 	.word	0x2000007c
 8000558:	080004c9 	.word	0x080004c9

0800055c <__sfp_lock_acquire>:
 800055c:	4801      	ldr	r0, [pc, #4]	@ (8000564 <__sfp_lock_acquire+0x8>)
 800055e:	f000 b9ee 	b.w	800093e <__retarget_lock_acquire_recursive>
 8000562:	bf00      	nop
 8000564:	200001bd 	.word	0x200001bd

08000568 <__sfp_lock_release>:
 8000568:	4801      	ldr	r0, [pc, #4]	@ (8000570 <__sfp_lock_release+0x8>)
 800056a:	f000 b9e9 	b.w	8000940 <__retarget_lock_release_recursive>
 800056e:	bf00      	nop
 8000570:	200001bd 	.word	0x200001bd

08000574 <__sinit>:
 8000574:	b510      	push	{r4, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	f7ff fff0 	bl	800055c <__sfp_lock_acquire>
 800057c:	6a23      	ldr	r3, [r4, #32]
 800057e:	b11b      	cbz	r3, 8000588 <__sinit+0x14>
 8000580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000584:	f7ff bff0 	b.w	8000568 <__sfp_lock_release>
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <__sinit+0x28>)
 800058a:	6223      	str	r3, [r4, #32]
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <__sinit+0x2c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f5      	bne.n	8000580 <__sinit+0xc>
 8000594:	f7ff ffc4 	bl	8000520 <global_stdio_init.part.0>
 8000598:	e7f2      	b.n	8000580 <__sinit+0xc>
 800059a:	bf00      	nop
 800059c:	080004e1 	.word	0x080004e1
 80005a0:	200001b4 	.word	0x200001b4

080005a4 <_fwalk_sglue>:
 80005a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005a8:	4607      	mov	r7, r0
 80005aa:	4688      	mov	r8, r1
 80005ac:	4614      	mov	r4, r2
 80005ae:	2600      	movs	r6, #0
 80005b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005b4:	f1b9 0901 	subs.w	r9, r9, #1
 80005b8:	d505      	bpl.n	80005c6 <_fwalk_sglue+0x22>
 80005ba:	6824      	ldr	r4, [r4, #0]
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d1f7      	bne.n	80005b0 <_fwalk_sglue+0xc>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005c6:	89ab      	ldrh	r3, [r5, #12]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d907      	bls.n	80005dc <_fwalk_sglue+0x38>
 80005cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005d0:	3301      	adds	r3, #1
 80005d2:	d003      	beq.n	80005dc <_fwalk_sglue+0x38>
 80005d4:	4629      	mov	r1, r5
 80005d6:	4638      	mov	r0, r7
 80005d8:	47c0      	blx	r8
 80005da:	4306      	orrs	r6, r0
 80005dc:	3568      	adds	r5, #104	@ 0x68
 80005de:	e7e9      	b.n	80005b4 <_fwalk_sglue+0x10>

080005e0 <_puts_r>:
 80005e0:	6a03      	ldr	r3, [r0, #32]
 80005e2:	b570      	push	{r4, r5, r6, lr}
 80005e4:	6884      	ldr	r4, [r0, #8]
 80005e6:	4605      	mov	r5, r0
 80005e8:	460e      	mov	r6, r1
 80005ea:	b90b      	cbnz	r3, 80005f0 <_puts_r+0x10>
 80005ec:	f7ff ffc2 	bl	8000574 <__sinit>
 80005f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80005f2:	07db      	lsls	r3, r3, #31
 80005f4:	d405      	bmi.n	8000602 <_puts_r+0x22>
 80005f6:	89a3      	ldrh	r3, [r4, #12]
 80005f8:	0598      	lsls	r0, r3, #22
 80005fa:	d402      	bmi.n	8000602 <_puts_r+0x22>
 80005fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80005fe:	f000 f99e 	bl	800093e <__retarget_lock_acquire_recursive>
 8000602:	89a3      	ldrh	r3, [r4, #12]
 8000604:	0719      	lsls	r1, r3, #28
 8000606:	d502      	bpl.n	800060e <_puts_r+0x2e>
 8000608:	6923      	ldr	r3, [r4, #16]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d135      	bne.n	800067a <_puts_r+0x9a>
 800060e:	4621      	mov	r1, r4
 8000610:	4628      	mov	r0, r5
 8000612:	f000 f8c5 	bl	80007a0 <__swsetup_r>
 8000616:	b380      	cbz	r0, 800067a <_puts_r+0x9a>
 8000618:	f04f 35ff 	mov.w	r5, #4294967295
 800061c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800061e:	07da      	lsls	r2, r3, #31
 8000620:	d405      	bmi.n	800062e <_puts_r+0x4e>
 8000622:	89a3      	ldrh	r3, [r4, #12]
 8000624:	059b      	lsls	r3, r3, #22
 8000626:	d402      	bmi.n	800062e <_puts_r+0x4e>
 8000628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800062a:	f000 f989 	bl	8000940 <__retarget_lock_release_recursive>
 800062e:	4628      	mov	r0, r5
 8000630:	bd70      	pop	{r4, r5, r6, pc}
 8000632:	2b00      	cmp	r3, #0
 8000634:	da04      	bge.n	8000640 <_puts_r+0x60>
 8000636:	69a2      	ldr	r2, [r4, #24]
 8000638:	429a      	cmp	r2, r3
 800063a:	dc17      	bgt.n	800066c <_puts_r+0x8c>
 800063c:	290a      	cmp	r1, #10
 800063e:	d015      	beq.n	800066c <_puts_r+0x8c>
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	6022      	str	r2, [r4, #0]
 8000646:	7019      	strb	r1, [r3, #0]
 8000648:	68a3      	ldr	r3, [r4, #8]
 800064a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800064e:	3b01      	subs	r3, #1
 8000650:	60a3      	str	r3, [r4, #8]
 8000652:	2900      	cmp	r1, #0
 8000654:	d1ed      	bne.n	8000632 <_puts_r+0x52>
 8000656:	2b00      	cmp	r3, #0
 8000658:	da11      	bge.n	800067e <_puts_r+0x9e>
 800065a:	4622      	mov	r2, r4
 800065c:	210a      	movs	r1, #10
 800065e:	4628      	mov	r0, r5
 8000660:	f000 f85f 	bl	8000722 <__swbuf_r>
 8000664:	3001      	adds	r0, #1
 8000666:	d0d7      	beq.n	8000618 <_puts_r+0x38>
 8000668:	250a      	movs	r5, #10
 800066a:	e7d7      	b.n	800061c <_puts_r+0x3c>
 800066c:	4622      	mov	r2, r4
 800066e:	4628      	mov	r0, r5
 8000670:	f000 f857 	bl	8000722 <__swbuf_r>
 8000674:	3001      	adds	r0, #1
 8000676:	d1e7      	bne.n	8000648 <_puts_r+0x68>
 8000678:	e7ce      	b.n	8000618 <_puts_r+0x38>
 800067a:	3e01      	subs	r6, #1
 800067c:	e7e4      	b.n	8000648 <_puts_r+0x68>
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	6022      	str	r2, [r4, #0]
 8000684:	220a      	movs	r2, #10
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e7ee      	b.n	8000668 <_puts_r+0x88>
	...

0800068c <puts>:
 800068c:	4b02      	ldr	r3, [pc, #8]	@ (8000698 <puts+0xc>)
 800068e:	4601      	mov	r1, r0
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f7ff bfa5 	b.w	80005e0 <_puts_r>
 8000696:	bf00      	nop
 8000698:	2000000c 	.word	0x2000000c

0800069c <__sread>:
 800069c:	b510      	push	{r4, lr}
 800069e:	460c      	mov	r4, r1
 80006a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006a4:	f000 f8fc 	bl	80008a0 <_read_r>
 80006a8:	2800      	cmp	r0, #0
 80006aa:	bfab      	itete	ge
 80006ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80006ae:	89a3      	ldrhlt	r3, [r4, #12]
 80006b0:	181b      	addge	r3, r3, r0
 80006b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80006b6:	bfac      	ite	ge
 80006b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80006ba:	81a3      	strhlt	r3, [r4, #12]
 80006bc:	bd10      	pop	{r4, pc}

080006be <__swrite>:
 80006be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c2:	461f      	mov	r7, r3
 80006c4:	898b      	ldrh	r3, [r1, #12]
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	4605      	mov	r5, r0
 80006ca:	460c      	mov	r4, r1
 80006cc:	4616      	mov	r6, r2
 80006ce:	d505      	bpl.n	80006dc <__swrite+0x1e>
 80006d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006d4:	2302      	movs	r3, #2
 80006d6:	2200      	movs	r2, #0
 80006d8:	f000 f8d0 	bl	800087c <_lseek_r>
 80006dc:	89a3      	ldrh	r3, [r4, #12]
 80006de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80006e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e6:	81a3      	strh	r3, [r4, #12]
 80006e8:	4632      	mov	r2, r6
 80006ea:	463b      	mov	r3, r7
 80006ec:	4628      	mov	r0, r5
 80006ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006f2:	f000 b8e7 	b.w	80008c4 <_write_r>

080006f6 <__sseek>:
 80006f6:	b510      	push	{r4, lr}
 80006f8:	460c      	mov	r4, r1
 80006fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006fe:	f000 f8bd 	bl	800087c <_lseek_r>
 8000702:	1c43      	adds	r3, r0, #1
 8000704:	89a3      	ldrh	r3, [r4, #12]
 8000706:	bf15      	itete	ne
 8000708:	6560      	strne	r0, [r4, #84]	@ 0x54
 800070a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800070e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000712:	81a3      	strheq	r3, [r4, #12]
 8000714:	bf18      	it	ne
 8000716:	81a3      	strhne	r3, [r4, #12]
 8000718:	bd10      	pop	{r4, pc}

0800071a <__sclose>:
 800071a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800071e:	f000 b89d 	b.w	800085c <_close_r>

08000722 <__swbuf_r>:
 8000722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000724:	460e      	mov	r6, r1
 8000726:	4614      	mov	r4, r2
 8000728:	4605      	mov	r5, r0
 800072a:	b118      	cbz	r0, 8000734 <__swbuf_r+0x12>
 800072c:	6a03      	ldr	r3, [r0, #32]
 800072e:	b90b      	cbnz	r3, 8000734 <__swbuf_r+0x12>
 8000730:	f7ff ff20 	bl	8000574 <__sinit>
 8000734:	69a3      	ldr	r3, [r4, #24]
 8000736:	60a3      	str	r3, [r4, #8]
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	071a      	lsls	r2, r3, #28
 800073c:	d501      	bpl.n	8000742 <__swbuf_r+0x20>
 800073e:	6923      	ldr	r3, [r4, #16]
 8000740:	b943      	cbnz	r3, 8000754 <__swbuf_r+0x32>
 8000742:	4621      	mov	r1, r4
 8000744:	4628      	mov	r0, r5
 8000746:	f000 f82b 	bl	80007a0 <__swsetup_r>
 800074a:	b118      	cbz	r0, 8000754 <__swbuf_r+0x32>
 800074c:	f04f 37ff 	mov.w	r7, #4294967295
 8000750:	4638      	mov	r0, r7
 8000752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	6922      	ldr	r2, [r4, #16]
 8000758:	1a98      	subs	r0, r3, r2
 800075a:	6963      	ldr	r3, [r4, #20]
 800075c:	b2f6      	uxtb	r6, r6
 800075e:	4283      	cmp	r3, r0
 8000760:	4637      	mov	r7, r6
 8000762:	dc05      	bgt.n	8000770 <__swbuf_r+0x4e>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 fa64 	bl	8000c34 <_fflush_r>
 800076c:	2800      	cmp	r0, #0
 800076e:	d1ed      	bne.n	800074c <__swbuf_r+0x2a>
 8000770:	68a3      	ldr	r3, [r4, #8]
 8000772:	3b01      	subs	r3, #1
 8000774:	60a3      	str	r3, [r4, #8]
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	6022      	str	r2, [r4, #0]
 800077c:	701e      	strb	r6, [r3, #0]
 800077e:	6962      	ldr	r2, [r4, #20]
 8000780:	1c43      	adds	r3, r0, #1
 8000782:	429a      	cmp	r2, r3
 8000784:	d004      	beq.n	8000790 <__swbuf_r+0x6e>
 8000786:	89a3      	ldrh	r3, [r4, #12]
 8000788:	07db      	lsls	r3, r3, #31
 800078a:	d5e1      	bpl.n	8000750 <__swbuf_r+0x2e>
 800078c:	2e0a      	cmp	r6, #10
 800078e:	d1df      	bne.n	8000750 <__swbuf_r+0x2e>
 8000790:	4621      	mov	r1, r4
 8000792:	4628      	mov	r0, r5
 8000794:	f000 fa4e 	bl	8000c34 <_fflush_r>
 8000798:	2800      	cmp	r0, #0
 800079a:	d0d9      	beq.n	8000750 <__swbuf_r+0x2e>
 800079c:	e7d6      	b.n	800074c <__swbuf_r+0x2a>
	...

080007a0 <__swsetup_r>:
 80007a0:	b538      	push	{r3, r4, r5, lr}
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <__swsetup_r+0xa8>)
 80007a4:	4605      	mov	r5, r0
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	460c      	mov	r4, r1
 80007aa:	b118      	cbz	r0, 80007b4 <__swsetup_r+0x14>
 80007ac:	6a03      	ldr	r3, [r0, #32]
 80007ae:	b90b      	cbnz	r3, 80007b4 <__swsetup_r+0x14>
 80007b0:	f7ff fee0 	bl	8000574 <__sinit>
 80007b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007b8:	0719      	lsls	r1, r3, #28
 80007ba:	d422      	bmi.n	8000802 <__swsetup_r+0x62>
 80007bc:	06da      	lsls	r2, r3, #27
 80007be:	d407      	bmi.n	80007d0 <__swsetup_r+0x30>
 80007c0:	2209      	movs	r2, #9
 80007c2:	602a      	str	r2, [r5, #0]
 80007c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007c8:	81a3      	strh	r3, [r4, #12]
 80007ca:	f04f 30ff 	mov.w	r0, #4294967295
 80007ce:	e033      	b.n	8000838 <__swsetup_r+0x98>
 80007d0:	0758      	lsls	r0, r3, #29
 80007d2:	d512      	bpl.n	80007fa <__swsetup_r+0x5a>
 80007d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80007d6:	b141      	cbz	r1, 80007ea <__swsetup_r+0x4a>
 80007d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80007dc:	4299      	cmp	r1, r3
 80007de:	d002      	beq.n	80007e6 <__swsetup_r+0x46>
 80007e0:	4628      	mov	r0, r5
 80007e2:	f000 f8af 	bl	8000944 <_free_r>
 80007e6:	2300      	movs	r3, #0
 80007e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80007f0:	81a3      	strh	r3, [r4, #12]
 80007f2:	2300      	movs	r3, #0
 80007f4:	6063      	str	r3, [r4, #4]
 80007f6:	6923      	ldr	r3, [r4, #16]
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	81a3      	strh	r3, [r4, #12]
 8000802:	6923      	ldr	r3, [r4, #16]
 8000804:	b94b      	cbnz	r3, 800081a <__swsetup_r+0x7a>
 8000806:	89a3      	ldrh	r3, [r4, #12]
 8000808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800080c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000810:	d003      	beq.n	800081a <__swsetup_r+0x7a>
 8000812:	4621      	mov	r1, r4
 8000814:	4628      	mov	r0, r5
 8000816:	f000 fa5b 	bl	8000cd0 <__smakebuf_r>
 800081a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800081e:	f013 0201 	ands.w	r2, r3, #1
 8000822:	d00a      	beq.n	800083a <__swsetup_r+0x9a>
 8000824:	2200      	movs	r2, #0
 8000826:	60a2      	str	r2, [r4, #8]
 8000828:	6962      	ldr	r2, [r4, #20]
 800082a:	4252      	negs	r2, r2
 800082c:	61a2      	str	r2, [r4, #24]
 800082e:	6922      	ldr	r2, [r4, #16]
 8000830:	b942      	cbnz	r2, 8000844 <__swsetup_r+0xa4>
 8000832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000836:	d1c5      	bne.n	80007c4 <__swsetup_r+0x24>
 8000838:	bd38      	pop	{r3, r4, r5, pc}
 800083a:	0799      	lsls	r1, r3, #30
 800083c:	bf58      	it	pl
 800083e:	6962      	ldrpl	r2, [r4, #20]
 8000840:	60a2      	str	r2, [r4, #8]
 8000842:	e7f4      	b.n	800082e <__swsetup_r+0x8e>
 8000844:	2000      	movs	r0, #0
 8000846:	e7f7      	b.n	8000838 <__swsetup_r+0x98>
 8000848:	2000000c 	.word	0x2000000c

0800084c <memset>:
 800084c:	4402      	add	r2, r0
 800084e:	4603      	mov	r3, r0
 8000850:	4293      	cmp	r3, r2
 8000852:	d100      	bne.n	8000856 <memset+0xa>
 8000854:	4770      	bx	lr
 8000856:	f803 1b01 	strb.w	r1, [r3], #1
 800085a:	e7f9      	b.n	8000850 <memset+0x4>

0800085c <_close_r>:
 800085c:	b538      	push	{r3, r4, r5, lr}
 800085e:	4d06      	ldr	r5, [pc, #24]	@ (8000878 <_close_r+0x1c>)
 8000860:	2300      	movs	r3, #0
 8000862:	4604      	mov	r4, r0
 8000864:	4608      	mov	r0, r1
 8000866:	602b      	str	r3, [r5, #0]
 8000868:	f7ff fd67 	bl	800033a <_close>
 800086c:	1c43      	adds	r3, r0, #1
 800086e:	d102      	bne.n	8000876 <_close_r+0x1a>
 8000870:	682b      	ldr	r3, [r5, #0]
 8000872:	b103      	cbz	r3, 8000876 <_close_r+0x1a>
 8000874:	6023      	str	r3, [r4, #0]
 8000876:	bd38      	pop	{r3, r4, r5, pc}
 8000878:	200001b8 	.word	0x200001b8

0800087c <_lseek_r>:
 800087c:	b538      	push	{r3, r4, r5, lr}
 800087e:	4d07      	ldr	r5, [pc, #28]	@ (800089c <_lseek_r+0x20>)
 8000880:	4604      	mov	r4, r0
 8000882:	4608      	mov	r0, r1
 8000884:	4611      	mov	r1, r2
 8000886:	2200      	movs	r2, #0
 8000888:	602a      	str	r2, [r5, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	f7ff fd79 	bl	8000382 <_lseek>
 8000890:	1c43      	adds	r3, r0, #1
 8000892:	d102      	bne.n	800089a <_lseek_r+0x1e>
 8000894:	682b      	ldr	r3, [r5, #0]
 8000896:	b103      	cbz	r3, 800089a <_lseek_r+0x1e>
 8000898:	6023      	str	r3, [r4, #0]
 800089a:	bd38      	pop	{r3, r4, r5, pc}
 800089c:	200001b8 	.word	0x200001b8

080008a0 <_read_r>:
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4d07      	ldr	r5, [pc, #28]	@ (80008c0 <_read_r+0x20>)
 80008a4:	4604      	mov	r4, r0
 80008a6:	4608      	mov	r0, r1
 80008a8:	4611      	mov	r1, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	602a      	str	r2, [r5, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	f7ff fd0a 	bl	80002c8 <_read>
 80008b4:	1c43      	adds	r3, r0, #1
 80008b6:	d102      	bne.n	80008be <_read_r+0x1e>
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	b103      	cbz	r3, 80008be <_read_r+0x1e>
 80008bc:	6023      	str	r3, [r4, #0]
 80008be:	bd38      	pop	{r3, r4, r5, pc}
 80008c0:	200001b8 	.word	0x200001b8

080008c4 <_write_r>:
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	4d07      	ldr	r5, [pc, #28]	@ (80008e4 <_write_r+0x20>)
 80008c8:	4604      	mov	r4, r0
 80008ca:	4608      	mov	r0, r1
 80008cc:	4611      	mov	r1, r2
 80008ce:	2200      	movs	r2, #0
 80008d0:	602a      	str	r2, [r5, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	f7ff fd15 	bl	8000302 <_write>
 80008d8:	1c43      	adds	r3, r0, #1
 80008da:	d102      	bne.n	80008e2 <_write_r+0x1e>
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	b103      	cbz	r3, 80008e2 <_write_r+0x1e>
 80008e0:	6023      	str	r3, [r4, #0]
 80008e2:	bd38      	pop	{r3, r4, r5, pc}
 80008e4:	200001b8 	.word	0x200001b8

080008e8 <__errno>:
 80008e8:	4b01      	ldr	r3, [pc, #4]	@ (80008f0 <__errno+0x8>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2000000c 	.word	0x2000000c

080008f4 <__libc_init_array>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4d0d      	ldr	r5, [pc, #52]	@ (800092c <__libc_init_array+0x38>)
 80008f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000930 <__libc_init_array+0x3c>)
 80008fa:	1b64      	subs	r4, r4, r5
 80008fc:	10a4      	asrs	r4, r4, #2
 80008fe:	2600      	movs	r6, #0
 8000900:	42a6      	cmp	r6, r4
 8000902:	d109      	bne.n	8000918 <__libc_init_array+0x24>
 8000904:	4d0b      	ldr	r5, [pc, #44]	@ (8000934 <__libc_init_array+0x40>)
 8000906:	4c0c      	ldr	r4, [pc, #48]	@ (8000938 <__libc_init_array+0x44>)
 8000908:	f000 fa50 	bl	8000dac <_init>
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	2600      	movs	r6, #0
 8000912:	42a6      	cmp	r6, r4
 8000914:	d105      	bne.n	8000922 <__libc_init_array+0x2e>
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f855 3b04 	ldr.w	r3, [r5], #4
 800091c:	4798      	blx	r3
 800091e:	3601      	adds	r6, #1
 8000920:	e7ee      	b.n	8000900 <__libc_init_array+0xc>
 8000922:	f855 3b04 	ldr.w	r3, [r5], #4
 8000926:	4798      	blx	r3
 8000928:	3601      	adds	r6, #1
 800092a:	e7f2      	b.n	8000912 <__libc_init_array+0x1e>
 800092c:	08000e18 	.word	0x08000e18
 8000930:	08000e18 	.word	0x08000e18
 8000934:	08000e18 	.word	0x08000e18
 8000938:	08000e1c 	.word	0x08000e1c

0800093c <__retarget_lock_init_recursive>:
 800093c:	4770      	bx	lr

0800093e <__retarget_lock_acquire_recursive>:
 800093e:	4770      	bx	lr

08000940 <__retarget_lock_release_recursive>:
 8000940:	4770      	bx	lr
	...

08000944 <_free_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4605      	mov	r5, r0
 8000948:	2900      	cmp	r1, #0
 800094a:	d041      	beq.n	80009d0 <_free_r+0x8c>
 800094c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000950:	1f0c      	subs	r4, r1, #4
 8000952:	2b00      	cmp	r3, #0
 8000954:	bfb8      	it	lt
 8000956:	18e4      	addlt	r4, r4, r3
 8000958:	f000 f8e0 	bl	8000b1c <__malloc_lock>
 800095c:	4a1d      	ldr	r2, [pc, #116]	@ (80009d4 <_free_r+0x90>)
 800095e:	6813      	ldr	r3, [r2, #0]
 8000960:	b933      	cbnz	r3, 8000970 <_free_r+0x2c>
 8000962:	6063      	str	r3, [r4, #4]
 8000964:	6014      	str	r4, [r2, #0]
 8000966:	4628      	mov	r0, r5
 8000968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800096c:	f000 b8dc 	b.w	8000b28 <__malloc_unlock>
 8000970:	42a3      	cmp	r3, r4
 8000972:	d908      	bls.n	8000986 <_free_r+0x42>
 8000974:	6820      	ldr	r0, [r4, #0]
 8000976:	1821      	adds	r1, r4, r0
 8000978:	428b      	cmp	r3, r1
 800097a:	bf01      	itttt	eq
 800097c:	6819      	ldreq	r1, [r3, #0]
 800097e:	685b      	ldreq	r3, [r3, #4]
 8000980:	1809      	addeq	r1, r1, r0
 8000982:	6021      	streq	r1, [r4, #0]
 8000984:	e7ed      	b.n	8000962 <_free_r+0x1e>
 8000986:	461a      	mov	r2, r3
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	b10b      	cbz	r3, 8000990 <_free_r+0x4c>
 800098c:	42a3      	cmp	r3, r4
 800098e:	d9fa      	bls.n	8000986 <_free_r+0x42>
 8000990:	6811      	ldr	r1, [r2, #0]
 8000992:	1850      	adds	r0, r2, r1
 8000994:	42a0      	cmp	r0, r4
 8000996:	d10b      	bne.n	80009b0 <_free_r+0x6c>
 8000998:	6820      	ldr	r0, [r4, #0]
 800099a:	4401      	add	r1, r0
 800099c:	1850      	adds	r0, r2, r1
 800099e:	4283      	cmp	r3, r0
 80009a0:	6011      	str	r1, [r2, #0]
 80009a2:	d1e0      	bne.n	8000966 <_free_r+0x22>
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	6053      	str	r3, [r2, #4]
 80009aa:	4408      	add	r0, r1
 80009ac:	6010      	str	r0, [r2, #0]
 80009ae:	e7da      	b.n	8000966 <_free_r+0x22>
 80009b0:	d902      	bls.n	80009b8 <_free_r+0x74>
 80009b2:	230c      	movs	r3, #12
 80009b4:	602b      	str	r3, [r5, #0]
 80009b6:	e7d6      	b.n	8000966 <_free_r+0x22>
 80009b8:	6820      	ldr	r0, [r4, #0]
 80009ba:	1821      	adds	r1, r4, r0
 80009bc:	428b      	cmp	r3, r1
 80009be:	bf04      	itt	eq
 80009c0:	6819      	ldreq	r1, [r3, #0]
 80009c2:	685b      	ldreq	r3, [r3, #4]
 80009c4:	6063      	str	r3, [r4, #4]
 80009c6:	bf04      	itt	eq
 80009c8:	1809      	addeq	r1, r1, r0
 80009ca:	6021      	streq	r1, [r4, #0]
 80009cc:	6054      	str	r4, [r2, #4]
 80009ce:	e7ca      	b.n	8000966 <_free_r+0x22>
 80009d0:	bd38      	pop	{r3, r4, r5, pc}
 80009d2:	bf00      	nop
 80009d4:	200001c4 	.word	0x200001c4

080009d8 <sbrk_aligned>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4e0f      	ldr	r6, [pc, #60]	@ (8000a18 <sbrk_aligned+0x40>)
 80009dc:	460c      	mov	r4, r1
 80009de:	6831      	ldr	r1, [r6, #0]
 80009e0:	4605      	mov	r5, r0
 80009e2:	b911      	cbnz	r1, 80009ea <sbrk_aligned+0x12>
 80009e4:	f000 f9d2 	bl	8000d8c <_sbrk_r>
 80009e8:	6030      	str	r0, [r6, #0]
 80009ea:	4621      	mov	r1, r4
 80009ec:	4628      	mov	r0, r5
 80009ee:	f000 f9cd 	bl	8000d8c <_sbrk_r>
 80009f2:	1c43      	adds	r3, r0, #1
 80009f4:	d103      	bne.n	80009fe <sbrk_aligned+0x26>
 80009f6:	f04f 34ff 	mov.w	r4, #4294967295
 80009fa:	4620      	mov	r0, r4
 80009fc:	bd70      	pop	{r4, r5, r6, pc}
 80009fe:	1cc4      	adds	r4, r0, #3
 8000a00:	f024 0403 	bic.w	r4, r4, #3
 8000a04:	42a0      	cmp	r0, r4
 8000a06:	d0f8      	beq.n	80009fa <sbrk_aligned+0x22>
 8000a08:	1a21      	subs	r1, r4, r0
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f000 f9be 	bl	8000d8c <_sbrk_r>
 8000a10:	3001      	adds	r0, #1
 8000a12:	d1f2      	bne.n	80009fa <sbrk_aligned+0x22>
 8000a14:	e7ef      	b.n	80009f6 <sbrk_aligned+0x1e>
 8000a16:	bf00      	nop
 8000a18:	200001c0 	.word	0x200001c0

08000a1c <_malloc_r>:
 8000a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a20:	1ccd      	adds	r5, r1, #3
 8000a22:	f025 0503 	bic.w	r5, r5, #3
 8000a26:	3508      	adds	r5, #8
 8000a28:	2d0c      	cmp	r5, #12
 8000a2a:	bf38      	it	cc
 8000a2c:	250c      	movcc	r5, #12
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	4606      	mov	r6, r0
 8000a32:	db01      	blt.n	8000a38 <_malloc_r+0x1c>
 8000a34:	42a9      	cmp	r1, r5
 8000a36:	d904      	bls.n	8000a42 <_malloc_r+0x26>
 8000a38:	230c      	movs	r3, #12
 8000a3a:	6033      	str	r3, [r6, #0]
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b18 <_malloc_r+0xfc>
 8000a46:	f000 f869 	bl	8000b1c <__malloc_lock>
 8000a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a4e:	461c      	mov	r4, r3
 8000a50:	bb44      	cbnz	r4, 8000aa4 <_malloc_r+0x88>
 8000a52:	4629      	mov	r1, r5
 8000a54:	4630      	mov	r0, r6
 8000a56:	f7ff ffbf 	bl	80009d8 <sbrk_aligned>
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	d158      	bne.n	8000b12 <_malloc_r+0xf6>
 8000a60:	f8d8 4000 	ldr.w	r4, [r8]
 8000a64:	4627      	mov	r7, r4
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d143      	bne.n	8000af2 <_malloc_r+0xd6>
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d04b      	beq.n	8000b06 <_malloc_r+0xea>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	4639      	mov	r1, r7
 8000a72:	4630      	mov	r0, r6
 8000a74:	eb04 0903 	add.w	r9, r4, r3
 8000a78:	f000 f988 	bl	8000d8c <_sbrk_r>
 8000a7c:	4581      	cmp	r9, r0
 8000a7e:	d142      	bne.n	8000b06 <_malloc_r+0xea>
 8000a80:	6821      	ldr	r1, [r4, #0]
 8000a82:	1a6d      	subs	r5, r5, r1
 8000a84:	4629      	mov	r1, r5
 8000a86:	4630      	mov	r0, r6
 8000a88:	f7ff ffa6 	bl	80009d8 <sbrk_aligned>
 8000a8c:	3001      	adds	r0, #1
 8000a8e:	d03a      	beq.n	8000b06 <_malloc_r+0xea>
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	442b      	add	r3, r5
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	f8d8 3000 	ldr.w	r3, [r8]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	bb62      	cbnz	r2, 8000af8 <_malloc_r+0xdc>
 8000a9e:	f8c8 7000 	str.w	r7, [r8]
 8000aa2:	e00f      	b.n	8000ac4 <_malloc_r+0xa8>
 8000aa4:	6822      	ldr	r2, [r4, #0]
 8000aa6:	1b52      	subs	r2, r2, r5
 8000aa8:	d420      	bmi.n	8000aec <_malloc_r+0xd0>
 8000aaa:	2a0b      	cmp	r2, #11
 8000aac:	d917      	bls.n	8000ade <_malloc_r+0xc2>
 8000aae:	1961      	adds	r1, r4, r5
 8000ab0:	42a3      	cmp	r3, r4
 8000ab2:	6025      	str	r5, [r4, #0]
 8000ab4:	bf18      	it	ne
 8000ab6:	6059      	strne	r1, [r3, #4]
 8000ab8:	6863      	ldr	r3, [r4, #4]
 8000aba:	bf08      	it	eq
 8000abc:	f8c8 1000 	streq.w	r1, [r8]
 8000ac0:	5162      	str	r2, [r4, r5]
 8000ac2:	604b      	str	r3, [r1, #4]
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f000 f82f 	bl	8000b28 <__malloc_unlock>
 8000aca:	f104 000b 	add.w	r0, r4, #11
 8000ace:	1d23      	adds	r3, r4, #4
 8000ad0:	f020 0007 	bic.w	r0, r0, #7
 8000ad4:	1ac2      	subs	r2, r0, r3
 8000ad6:	bf1c      	itt	ne
 8000ad8:	1a1b      	subne	r3, r3, r0
 8000ada:	50a3      	strne	r3, [r4, r2]
 8000adc:	e7af      	b.n	8000a3e <_malloc_r+0x22>
 8000ade:	6862      	ldr	r2, [r4, #4]
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	bf0c      	ite	eq
 8000ae4:	f8c8 2000 	streq.w	r2, [r8]
 8000ae8:	605a      	strne	r2, [r3, #4]
 8000aea:	e7eb      	b.n	8000ac4 <_malloc_r+0xa8>
 8000aec:	4623      	mov	r3, r4
 8000aee:	6864      	ldr	r4, [r4, #4]
 8000af0:	e7ae      	b.n	8000a50 <_malloc_r+0x34>
 8000af2:	463c      	mov	r4, r7
 8000af4:	687f      	ldr	r7, [r7, #4]
 8000af6:	e7b6      	b.n	8000a66 <_malloc_r+0x4a>
 8000af8:	461a      	mov	r2, r3
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d1fb      	bne.n	8000af8 <_malloc_r+0xdc>
 8000b00:	2300      	movs	r3, #0
 8000b02:	6053      	str	r3, [r2, #4]
 8000b04:	e7de      	b.n	8000ac4 <_malloc_r+0xa8>
 8000b06:	230c      	movs	r3, #12
 8000b08:	6033      	str	r3, [r6, #0]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	f000 f80c 	bl	8000b28 <__malloc_unlock>
 8000b10:	e794      	b.n	8000a3c <_malloc_r+0x20>
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	e7d6      	b.n	8000ac4 <_malloc_r+0xa8>
 8000b16:	bf00      	nop
 8000b18:	200001c4 	.word	0x200001c4

08000b1c <__malloc_lock>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	@ (8000b24 <__malloc_lock+0x8>)
 8000b1e:	f7ff bf0e 	b.w	800093e <__retarget_lock_acquire_recursive>
 8000b22:	bf00      	nop
 8000b24:	200001bc 	.word	0x200001bc

08000b28 <__malloc_unlock>:
 8000b28:	4801      	ldr	r0, [pc, #4]	@ (8000b30 <__malloc_unlock+0x8>)
 8000b2a:	f7ff bf09 	b.w	8000940 <__retarget_lock_release_recursive>
 8000b2e:	bf00      	nop
 8000b30:	200001bc 	.word	0x200001bc

08000b34 <__sflush_r>:
 8000b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	0716      	lsls	r6, r2, #28
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	460c      	mov	r4, r1
 8000b40:	d454      	bmi.n	8000bec <__sflush_r+0xb8>
 8000b42:	684b      	ldr	r3, [r1, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dc02      	bgt.n	8000b4e <__sflush_r+0x1a>
 8000b48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd48      	ble.n	8000be0 <__sflush_r+0xac>
 8000b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d045      	beq.n	8000be0 <__sflush_r+0xac>
 8000b54:	2300      	movs	r3, #0
 8000b56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000b5a:	682f      	ldr	r7, [r5, #0]
 8000b5c:	6a21      	ldr	r1, [r4, #32]
 8000b5e:	602b      	str	r3, [r5, #0]
 8000b60:	d030      	beq.n	8000bc4 <__sflush_r+0x90>
 8000b62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000b64:	89a3      	ldrh	r3, [r4, #12]
 8000b66:	0759      	lsls	r1, r3, #29
 8000b68:	d505      	bpl.n	8000b76 <__sflush_r+0x42>
 8000b6a:	6863      	ldr	r3, [r4, #4]
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000b70:	b10b      	cbz	r3, 8000b76 <__sflush_r+0x42>
 8000b72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b74:	1ad2      	subs	r2, r2, r3
 8000b76:	2300      	movs	r3, #0
 8000b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b7a:	6a21      	ldr	r1, [r4, #32]
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	47b0      	blx	r6
 8000b80:	1c43      	adds	r3, r0, #1
 8000b82:	89a3      	ldrh	r3, [r4, #12]
 8000b84:	d106      	bne.n	8000b94 <__sflush_r+0x60>
 8000b86:	6829      	ldr	r1, [r5, #0]
 8000b88:	291d      	cmp	r1, #29
 8000b8a:	d82b      	bhi.n	8000be4 <__sflush_r+0xb0>
 8000b8c:	4a28      	ldr	r2, [pc, #160]	@ (8000c30 <__sflush_r+0xfc>)
 8000b8e:	40ca      	lsrs	r2, r1
 8000b90:	07d6      	lsls	r6, r2, #31
 8000b92:	d527      	bpl.n	8000be4 <__sflush_r+0xb0>
 8000b94:	2200      	movs	r2, #0
 8000b96:	6062      	str	r2, [r4, #4]
 8000b98:	04d9      	lsls	r1, r3, #19
 8000b9a:	6922      	ldr	r2, [r4, #16]
 8000b9c:	6022      	str	r2, [r4, #0]
 8000b9e:	d504      	bpl.n	8000baa <__sflush_r+0x76>
 8000ba0:	1c42      	adds	r2, r0, #1
 8000ba2:	d101      	bne.n	8000ba8 <__sflush_r+0x74>
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	b903      	cbnz	r3, 8000baa <__sflush_r+0x76>
 8000ba8:	6560      	str	r0, [r4, #84]	@ 0x54
 8000baa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bac:	602f      	str	r7, [r5, #0]
 8000bae:	b1b9      	cbz	r1, 8000be0 <__sflush_r+0xac>
 8000bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d002      	beq.n	8000bbe <__sflush_r+0x8a>
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f7ff fec3 	bl	8000944 <_free_r>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bc2:	e00d      	b.n	8000be0 <__sflush_r+0xac>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	47b0      	blx	r6
 8000bca:	4602      	mov	r2, r0
 8000bcc:	1c50      	adds	r0, r2, #1
 8000bce:	d1c9      	bne.n	8000b64 <__sflush_r+0x30>
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0c6      	beq.n	8000b64 <__sflush_r+0x30>
 8000bd6:	2b1d      	cmp	r3, #29
 8000bd8:	d001      	beq.n	8000bde <__sflush_r+0xaa>
 8000bda:	2b16      	cmp	r3, #22
 8000bdc:	d11d      	bne.n	8000c1a <__sflush_r+0xe6>
 8000bde:	602f      	str	r7, [r5, #0]
 8000be0:	2000      	movs	r0, #0
 8000be2:	e021      	b.n	8000c28 <__sflush_r+0xf4>
 8000be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	e01a      	b.n	8000c22 <__sflush_r+0xee>
 8000bec:	690f      	ldr	r7, [r1, #16]
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d0f6      	beq.n	8000be0 <__sflush_r+0xac>
 8000bf2:	0793      	lsls	r3, r2, #30
 8000bf4:	680e      	ldr	r6, [r1, #0]
 8000bf6:	bf08      	it	eq
 8000bf8:	694b      	ldreq	r3, [r1, #20]
 8000bfa:	600f      	str	r7, [r1, #0]
 8000bfc:	bf18      	it	ne
 8000bfe:	2300      	movne	r3, #0
 8000c00:	1bf6      	subs	r6, r6, r7
 8000c02:	608b      	str	r3, [r1, #8]
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	ddeb      	ble.n	8000be0 <__sflush_r+0xac>
 8000c08:	6a21      	ldr	r1, [r4, #32]
 8000c0a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000c0e:	4633      	mov	r3, r6
 8000c10:	463a      	mov	r2, r7
 8000c12:	4628      	mov	r0, r5
 8000c14:	47e0      	blx	ip
 8000c16:	2800      	cmp	r0, #0
 8000c18:	dc07      	bgt.n	8000c2a <__sflush_r+0xf6>
 8000c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c22:	81a3      	strh	r3, [r4, #12]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2a:	4407      	add	r7, r0
 8000c2c:	1a36      	subs	r6, r6, r0
 8000c2e:	e7e9      	b.n	8000c04 <__sflush_r+0xd0>
 8000c30:	20400001 	.word	0x20400001

08000c34 <_fflush_r>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	690b      	ldr	r3, [r1, #16]
 8000c38:	4605      	mov	r5, r0
 8000c3a:	460c      	mov	r4, r1
 8000c3c:	b913      	cbnz	r3, 8000c44 <_fflush_r+0x10>
 8000c3e:	2500      	movs	r5, #0
 8000c40:	4628      	mov	r0, r5
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
 8000c44:	b118      	cbz	r0, 8000c4e <_fflush_r+0x1a>
 8000c46:	6a03      	ldr	r3, [r0, #32]
 8000c48:	b90b      	cbnz	r3, 8000c4e <_fflush_r+0x1a>
 8000c4a:	f7ff fc93 	bl	8000574 <__sinit>
 8000c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f3      	beq.n	8000c3e <_fflush_r+0xa>
 8000c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000c58:	07d0      	lsls	r0, r2, #31
 8000c5a:	d404      	bmi.n	8000c66 <_fflush_r+0x32>
 8000c5c:	0599      	lsls	r1, r3, #22
 8000c5e:	d402      	bmi.n	8000c66 <_fflush_r+0x32>
 8000c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c62:	f7ff fe6c 	bl	800093e <__retarget_lock_acquire_recursive>
 8000c66:	4628      	mov	r0, r5
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f7ff ff63 	bl	8000b34 <__sflush_r>
 8000c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c70:	07da      	lsls	r2, r3, #31
 8000c72:	4605      	mov	r5, r0
 8000c74:	d4e4      	bmi.n	8000c40 <_fflush_r+0xc>
 8000c76:	89a3      	ldrh	r3, [r4, #12]
 8000c78:	059b      	lsls	r3, r3, #22
 8000c7a:	d4e1      	bmi.n	8000c40 <_fflush_r+0xc>
 8000c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c7e:	f7ff fe5f 	bl	8000940 <__retarget_lock_release_recursive>
 8000c82:	e7dd      	b.n	8000c40 <_fflush_r+0xc>

08000c84 <__swhatbuf_r>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	460c      	mov	r4, r1
 8000c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	b096      	sub	sp, #88	@ 0x58
 8000c90:	4615      	mov	r5, r2
 8000c92:	461e      	mov	r6, r3
 8000c94:	da0d      	bge.n	8000cb2 <__swhatbuf_r+0x2e>
 8000c96:	89a3      	ldrh	r3, [r4, #12]
 8000c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2340      	movne	r3, #64	@ 0x40
 8000ca4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ca8:	2000      	movs	r0, #0
 8000caa:	6031      	str	r1, [r6, #0]
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	b016      	add	sp, #88	@ 0x58
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
 8000cb2:	466a      	mov	r2, sp
 8000cb4:	f000 f848 	bl	8000d48 <_fstat_r>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	dbec      	blt.n	8000c96 <__swhatbuf_r+0x12>
 8000cbc:	9901      	ldr	r1, [sp, #4]
 8000cbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000cc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000cc6:	4259      	negs	r1, r3
 8000cc8:	4159      	adcs	r1, r3
 8000cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cce:	e7eb      	b.n	8000ca8 <__swhatbuf_r+0x24>

08000cd0 <__smakebuf_r>:
 8000cd0:	898b      	ldrh	r3, [r1, #12]
 8000cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cd4:	079d      	lsls	r5, r3, #30
 8000cd6:	4606      	mov	r6, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	d507      	bpl.n	8000cec <__smakebuf_r+0x1c>
 8000cdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ce0:	6023      	str	r3, [r4, #0]
 8000ce2:	6123      	str	r3, [r4, #16]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	6163      	str	r3, [r4, #20]
 8000ce8:	b003      	add	sp, #12
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cec:	ab01      	add	r3, sp, #4
 8000cee:	466a      	mov	r2, sp
 8000cf0:	f7ff ffc8 	bl	8000c84 <__swhatbuf_r>
 8000cf4:	9f00      	ldr	r7, [sp, #0]
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f7ff fe8e 	bl	8000a1c <_malloc_r>
 8000d00:	b948      	cbnz	r0, 8000d16 <__smakebuf_r+0x46>
 8000d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d06:	059a      	lsls	r2, r3, #22
 8000d08:	d4ee      	bmi.n	8000ce8 <__smakebuf_r+0x18>
 8000d0a:	f023 0303 	bic.w	r3, r3, #3
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	e7e2      	b.n	8000cdc <__smakebuf_r+0xc>
 8000d16:	89a3      	ldrh	r3, [r4, #12]
 8000d18:	6020      	str	r0, [r4, #0]
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1e:	81a3      	strh	r3, [r4, #12]
 8000d20:	9b01      	ldr	r3, [sp, #4]
 8000d22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d26:	b15b      	cbz	r3, 8000d40 <__smakebuf_r+0x70>
 8000d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f000 f81d 	bl	8000d6c <_isatty_r>
 8000d32:	b128      	cbz	r0, 8000d40 <__smakebuf_r+0x70>
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	81a3      	strh	r3, [r4, #12]
 8000d40:	89a3      	ldrh	r3, [r4, #12]
 8000d42:	431d      	orrs	r5, r3
 8000d44:	81a5      	strh	r5, [r4, #12]
 8000d46:	e7cf      	b.n	8000ce8 <__smakebuf_r+0x18>

08000d48 <_fstat_r>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	4d07      	ldr	r5, [pc, #28]	@ (8000d68 <_fstat_r+0x20>)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	4604      	mov	r4, r0
 8000d50:	4608      	mov	r0, r1
 8000d52:	4611      	mov	r1, r2
 8000d54:	602b      	str	r3, [r5, #0]
 8000d56:	f7ff fafb 	bl	8000350 <_fstat>
 8000d5a:	1c43      	adds	r3, r0, #1
 8000d5c:	d102      	bne.n	8000d64 <_fstat_r+0x1c>
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	b103      	cbz	r3, 8000d64 <_fstat_r+0x1c>
 8000d62:	6023      	str	r3, [r4, #0]
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop
 8000d68:	200001b8 	.word	0x200001b8

08000d6c <_isatty_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d06      	ldr	r5, [pc, #24]	@ (8000d88 <_isatty_r+0x1c>)
 8000d70:	2300      	movs	r3, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	602b      	str	r3, [r5, #0]
 8000d78:	f7ff faf9 	bl	800036e <_isatty>
 8000d7c:	1c43      	adds	r3, r0, #1
 8000d7e:	d102      	bne.n	8000d86 <_isatty_r+0x1a>
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	b103      	cbz	r3, 8000d86 <_isatty_r+0x1a>
 8000d84:	6023      	str	r3, [r4, #0]
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	200001b8 	.word	0x200001b8

08000d8c <_sbrk_r>:
 8000d8c:	b538      	push	{r3, r4, r5, lr}
 8000d8e:	4d06      	ldr	r5, [pc, #24]	@ (8000da8 <_sbrk_r+0x1c>)
 8000d90:	2300      	movs	r3, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	602b      	str	r3, [r5, #0]
 8000d98:	f7ff fb00 	bl	800039c <_sbrk>
 8000d9c:	1c43      	adds	r3, r0, #1
 8000d9e:	d102      	bne.n	8000da6 <_sbrk_r+0x1a>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	b103      	cbz	r3, 8000da6 <_sbrk_r+0x1a>
 8000da4:	6023      	str	r3, [r4, #0]
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
 8000da8:	200001b8 	.word	0x200001b8

08000dac <_init>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr

08000db8 <_fini>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr
